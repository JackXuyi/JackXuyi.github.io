<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的蜗牛</title>
  
  <subtitle>奔跑的蜗牛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-11-27T12:13:47.034Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>奔跑的蜗牛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>高德地图</title>
    <link href="http://yoursite.com/2022/11/28/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>http://yoursite.com/2022/11/28/高德地图/</id>
    <published>2022-11-27T19:55:24.000Z</published>
    <updated>2022-11-27T12:13:47.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>注册账号并申请 Key ，参考 <a href="https://lbs.amap.com/api/jsapi-v2/guide/abc/prepare" target="_blank" rel="noopener">官方链接</a></li><li>通过 <code>npm i @amap/amap-jsapi-loader</code> 安装 <code>SDK</code></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>配置 <code>securityJsCode</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>._AMapSecurityConfig = &#123;</span><br><span class="line">  securityJsCode: <span class="string">'你的 secret'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化 <code>SDK</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AMapLoader <span class="keyword">from</span> <span class="string">'@amap/amap-jsapi-loader'</span></span><br><span class="line"></span><br><span class="line">AMapLoader.load(&#123;</span><br><span class="line">  key: <span class="string">'你的 key'</span>, <span class="comment">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class="line">  version: <span class="string">'2.0'</span>, <span class="comment">// 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15</span></span><br><span class="line">  plugins: [], <span class="comment">// 需要使用的的插件列表，如比例尺'AMap.Scale'等</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">AMap</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>通过此种方式使用高德地图时，建议 <code>securityJsCode</code> 在使用前做简单的加密，如通过 <code>base64</code> 等方式加密等</li><li>当出现较大的误差时请检查 <code>key</code> 和 <code>securityJsCode</code> 是否匹配</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://lbs.amap.com/api/jsapi-v2/summary" target="_blank" rel="noopener">高德地图</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;注册账号并申请 Key ，参考 &lt;a href=&quot;https://lbs.amap.com/api/jsapi-v2/guide
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>pixi.js</title>
    <link href="http://yoursite.com/2022/11/28/pixi-js/"/>
    <id>http://yoursite.com/2022/11/28/pixi-js/</id>
    <published>2022-11-27T19:20:55.000Z</published>
    <updated>2022-11-27T11:53:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>Pixi 是一个非常快的 2D sprite 渲染引擎。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>速度快：在 2D 渲染方面，PixiJS 是最快的。</li><li>灵活：友好的、功能丰富的 API 让 PixiJS 轻松处理基本问题，同时您可以专注于生成令人难以置信跨平台体验。</li><li>免费： PixiJS 永久开源，并拥有庞大的支持社区推动它的发展和演变。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过 <code>npm</code> 安装最新的 6.5.8 版本，7.x 版本暂时还有一些问题，建议使用 6.x 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pixi.js@6.5.8</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>创建应用，并把应用挂载到 dom 中</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PIXI, &#123; Application, Sprite &#125; <span class="keyword">from</span> <span class="string">'pixi.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application(&#123;</span><br><span class="line">  width: <span class="number">500</span>,</span><br><span class="line">  height: <span class="number">500</span>,</span><br><span class="line">  antialias: <span class="literal">true</span>, <span class="comment">// default: false 反锯齿</span></span><br><span class="line">  resolution: <span class="number">1</span>, <span class="comment">// default: 1 分辨率</span></span><br><span class="line">&#125;)</span><br><span class="line">root.appendChild(app.view <span class="keyword">as</span> <span class="built_in">any</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>加载资源并把资源放在画布的中间</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.loader.add(<span class="string">'bunny'</span>, logo).load(<span class="function">(<span class="params">loader, resources</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// This creates a texture from a 'bunny.png' image.</span></span><br><span class="line">  <span class="keyword">const</span> bunny = <span class="keyword">new</span> Sprite(resources.bunny.texture)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup the position of the bunny</span></span><br><span class="line">  bunny.x = app.renderer.width / <span class="number">2</span></span><br><span class="line">  bunny.y = app.renderer.height / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Rotate around the center</span></span><br><span class="line">  bunny.anchor.x = <span class="number">0.5</span></span><br><span class="line">  bunny.anchor.y = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the bunny to the scene we are building.</span></span><br><span class="line">  app.stage.addChild(bunny)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>让图片运动起来</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Listen for frame updates</span></span><br><span class="line">app.ticker.add(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// each frame we spin the bunny around a bit</span></span><br><span class="line">  <span class="comment">// console.log('bunny.anchor.x', bunny.anchor)</span></span><br><span class="line">  <span class="keyword">if</span> (bunny.x &gt;= app.renderer.width) &#123;</span><br><span class="line">    bunny.x = <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bunny.x += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="示例图片"><a href="#示例图片" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="/images/2d/demo.jpg" alt="示例图片"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://pixijs.huashengweilai.com/" target="_blank" rel="noopener"> Pixi.js 中文网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Pixi 是一个非常快的 2D sprite 渲染引擎。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;速度快：在 2D 渲染方面，PixiJS 是最快的。&lt;/
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js获取方位信息</title>
    <link href="http://yoursite.com/2022/08/21/js%E8%8E%B7%E5%8F%96%E6%96%B9%E4%BD%8D%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2022/08/21/js获取方位信息/</id>
    <published>2022-08-20T22:56:47.000Z</published>
    <updated>2022-08-20T15:22:52.841Z</updated>
    
    <content type="html"><![CDATA[<p>js 提供了获取方位信息的方法，整体可以分为以下几步</p><h3 id="前置检查"><a href="#前置检查" class="headerlink" title="前置检查"></a>前置检查</h3><p>通过判断 <code>window</code> 是否具有 <code>DeviceOrientationEvent</code> 这个属性来判断是否支持获取方位信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkOrientation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Boolean</span>(<span class="built_in">window</span>.DeviceOrientationEvent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方位信息"><a href="#获取方位信息" class="headerlink" title="获取方位信息"></a>获取方位信息</h3><p>通过监听事件实现对方位信息的获取</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchOrientation</span>(<span class="params">callback: (e: DeviceOrientationEvent) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (checkOrientation()) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'deviceorientation'</span>, callback, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">'deviceorientation'</span>, callback, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> loop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a><code>callback</code></h5><p>获取方位信息后的回调，类型为 <code>(e: DeviceOrientationEvent) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DeviceOrientationEvent <span class="keyword">extends</span> Event &#123;</span><br><span class="line">  readonly absolute: <span class="built_in">boolean</span> <span class="comment">// 一个布尔值，指示设备是否绝对提供方向数据。</span></span><br><span class="line">  readonly alpha: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕z轴运动的数字，以度表示，值范围为0（包括）到360（不包括）。以正北方向为 0 度</span></span><br><span class="line">  readonly beta: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕x轴运动的数字，以度表示，值范围为-180（包括）到180（不包括）。这表示设备的前后运动。</span></span><br><span class="line">  readonly gamma: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕y轴运动的数字，以度表示，值范围为-90（包括）到90（不包括）。这表示设备从左到右的运动。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>需要当前页面为 <code>HTTPS</code> 才被允许获取方位信息</li><li>可以通过<a href="https://sensorbox.glitch.me/" target="_blank" rel="noopener">当前页面</a>检测设备是否支持获取方位信息</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition" target="_blank" rel="noopener">Geolocation 获取位置</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js 提供了获取方位信息的方法，整体可以分为以下几步&lt;/p&gt;
&lt;h3 id=&quot;前置检查&quot;&gt;&lt;a href=&quot;#前置检查&quot; class=&quot;headerlink&quot; title=&quot;前置检查&quot;&gt;&lt;/a&gt;前置检查&lt;/h3&gt;&lt;p&gt;通过判断 &lt;code&gt;window&lt;/code&gt; 是否具
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js获取位置信息</title>
    <link href="http://yoursite.com/2022/08/20/js%E8%8E%B7%E5%8F%96%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>http://yoursite.com/2022/08/20/js获取位置信息/</id>
    <published>2022-08-19T22:36:09.000Z</published>
    <updated>2022-08-19T15:35:05.008Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要获取定位信息，js 提供了对于的接口去获取，整体可以分为以下几步</p><h3 id="前置检查"><a href="#前置检查" class="headerlink" title="前置检查"></a>前置检查</h3><p>通过判断 <code>navigator</code> 是否具有 <code>geolocation</code> 这个属性来判断是否支持获取定位信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkGeolocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'geolocation'</span> <span class="keyword">in</span> navigator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h3><p>通过接口获取当前浏览器的定位授权状态</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> navigator?.permissions?.query(&#123; name: <span class="string">'geolocation'</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> res?.state || <span class="string">'prompt'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权状态共有 <code>denied</code>、<code>granted</code>、<code>prompt</code> 三种状态</p><ul><li><code>denied</code>：拒绝授权</li><li><code>granted</code>： 已经授权</li><li><code>prompt</code>：需要用户手动授权</li></ul><h3 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h3><h4 id="一次获取位置"><a href="#一次获取位置" class="headerlink" title="一次获取位置"></a>一次获取位置</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.geolocation.getCurrentPosition(callback, handleError, options)</span><br></pre></td></tr></table></figure><h4 id="监听位置变化"><a href="#监听位置变化" class="headerlink" title="监听位置变化"></a>监听位置变化</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册事件监听</span></span><br><span class="line"><span class="keyword">const</span> geoWatchID = navigator.geolocation.watchPosition(</span><br><span class="line">  callback,</span><br><span class="line">  handleError,</span><br><span class="line">  options</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清楚监听事件</span></span><br><span class="line">navigator.geolocation.clearWatch(geoWatchID)</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a><code>callback</code></h5><p>获取位置信息后的回调，类型为 <code>(position: GeolocationPosition) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GeolocationCoordinates &#123;</span><br><span class="line">  readonly accuracy: <span class="built_in">number</span> <span class="comment">// 表示纬度和经度属性精度的双精度值，以米为单位</span></span><br><span class="line">  readonly altitude: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 海拔高度</span></span><br><span class="line">  readonly altitudeAccuracy: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 一个双精度值，表示以米为单位的高度精度。此值可以为空。</span></span><br><span class="line">  readonly heading: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 返回表示设备运行方向的双精度值。该值以度为单位，表示设备偏离正北方航向的距离。0度表示正北方，方向为顺时针方向（即东90度，西270度）。如果速度为0，航向为NaN。如果设备无法提供航向信息，则该值为空。</span></span><br><span class="line">  readonly latitude: <span class="built_in">number</span> <span class="comment">// 维度</span></span><br><span class="line">  readonly longitude: <span class="built_in">number</span> <span class="comment">// 经度</span></span><br><span class="line">  readonly speed: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 返回表示设备速度的双精度值，单位为米/秒。此值可以为空。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Available only in secure contexts. */</span></span><br><span class="line"><span class="keyword">interface</span> GeolocationPosition &#123;</span><br><span class="line">  readonly coords: GeolocationCoordinates <span class="comment">// 表示设备在地球上的位置和海拔，以及计算这些属性的精确度</span></span><br><span class="line">  readonly timestamp: EpochTimeStamp <span class="comment">// 表示获取到的位置的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="handleError"><a href="#handleError" class="headerlink" title="handleError"></a><code>handleError</code></h5><p>获取位置信息失败的回调，类型为 <code>(error: GeolocationPositionError) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GeolocationPositionError &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 错误原因</span></span><br><span class="line"><span class="comment">   * 1 -&gt; PERMISSION_DENIED: 地理位置信息的获取失败，因为该页面没有获取地理位置信息的权限。</span></span><br><span class="line"><span class="comment">   * 2 -&gt; POSITION_UNAVAILABLE:地理位置获取失败，因为至少有一个内部位置源返回一个内部错误。</span></span><br><span class="line"><span class="comment">   * 3 -&gt; TIMEOUT: 获取地理位置超时，通过定义PositionOptions.timeout 来设置获取地理位置的超时时长。</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  readonly code: <span class="built_in">number</span></span><br><span class="line">  readonly message: <span class="built_in">string</span> <span class="comment">// 描述错误的详细信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="options"><a href="#options" class="headerlink" title="options"></a><code>options</code></h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> PositionOptions &#123;</span><br><span class="line">  enableHighAccuracy?: <span class="built_in">boolean</span> <span class="comment">// 表示应用程序希望接收最佳可能结果。如果为真，并且如果设备能够提供更准确的位置，它将这样做。请注意，这可能导致响应时间变慢或功耗增加（例如，使用移动设备上的GPS芯片）。另一方面，如果为假，则设备可以通过更快地响应和/或使用更少的功率来自由节省资源。默认值：false。</span></span><br><span class="line">  maximumAge?: <span class="built_in">number</span> <span class="comment">// 可接受返回的可能缓存位置的最大时间（以毫秒为单位）。如果设置为0，则表示设备无法使用缓存位置，必须尝试检索实际当前位置。如果设置为无穷大，则设备必须返回缓存位置，而不管其使用年限如何。默认值：0。</span></span><br><span class="line">  timeout?: <span class="built_in">number</span> <span class="comment">// 表示设备返回位置所允许的最大时间长度（以毫秒为单位）。默认值为无穷大，这意味着getCurrentPosition（）在位置可用之前不会返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><code>iOS</code>或部分 <code>Android</code> 设备需要当前页面为 <code>HTTPS</code> 才被允许获取位置信息</li><li>可以通过<a href="https://sensorbox.glitch.me/" target="_blank" rel="noopener">当前页面</a>检测设备是否支持获取位置信息</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition" target="_blank" rel="noopener">Geolocation 获取位置</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中需要获取定位信息，js 提供了对于的接口去获取，整体可以分为以下几步&lt;/p&gt;
&lt;h3 id=&quot;前置检查&quot;&gt;&lt;a href=&quot;#前置检查&quot; class=&quot;headerlink&quot; title=&quot;前置检查&quot;&gt;&lt;/a&gt;前置检查&lt;/h3&gt;&lt;p&gt;通过判断 &lt;code&gt;naviga
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>git merge和rebase</title>
    <link href="http://yoursite.com/2022/05/29/merge%E5%92%8Crebase/"/>
    <id>http://yoursite.com/2022/05/29/merge和rebase/</id>
    <published>2022-05-28T21:55:56.000Z</published>
    <updated>2022-05-28T15:08:44.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都是用来合并分支，将不同分支的代码融合在一起</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><h4 id="生成的代码树不同"><a href="#生成的代码树不同" class="headerlink" title="生成的代码树不同"></a>生成的代码树不同</h4><ul><li><p>merge 生成的代码树记录了所有的历史操作过程<br><img src="/images/git/merge.png" alt="merge 生成的代码树"></p></li><li><p>rebase 生成的代码树是一条直线，通过对目标分支进行 “嫁接”，把新提交的 commit 代码添加到源分支的最后<br><img src="/images/git/rebase.png" alt="rebase 生成的代码树"></p></li></ul><h4 id="处理冲突的方式"><a href="#处理冲突的方式" class="headerlink" title="处理冲突的方式"></a>处理冲突的方式</h4><ul><li>merge 命令合并分支，只需解决一次冲突，但是会产生一个新的 commit</li><li>rebase 命令合并分支，解决完冲突，执行 git add .和 git rebase –continue，不会产生额外的 commit，但是需要重复处理多次冲突。</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>当满足以下条件时：</p><ul><li>能够定期 rebase（避免 rebase 时出现大量冲突需要解决）</li><li>开发的分支只是自己使用（避免其他人拉去代码时本地产生冲突）</li><li>非基础公共分支</li></ul><p>使用 rebase，其它使用 merge</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase [<span class="built_in">source</span>] [target]</span><br><span class="line"><span class="comment"># source 分支作为基线，把 target 分支的 commit 嫁接到 source 分支上，若 target 分支参数不存在则使用当前所在分支</span></span><br></pre></td></tr></table></figure><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>如果你不熟悉 git rebase，可以随时在临时分支中执行 rebase。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/57872388" target="_blank" rel="noopener">Merge vs Rebase</a></li><li><a href="https://git-scm.com/docs/git-rebase/" target="_blank" rel="noopener">git-rebase </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;相同点&quot;&gt;&lt;a href=&quot;#相同点&quot; class=&quot;headerlink&quot; title=&quot;相同点&quot;&gt;&lt;/a&gt;相同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;都是用来合并分支，将不同分支的代码融合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不同点&quot;&gt;&lt;a href=&quot;#不同点
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>黑客增长</title>
    <link href="http://yoursite.com/2022/05/09/%E9%BB%91%E5%AE%A2%E5%A2%9E%E9%95%BF/"/>
    <id>http://yoursite.com/2022/05/09/黑客增长/</id>
    <published>2022-05-08T22:30:27.000Z</published>
    <updated>2022-05-22T14:23:48.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>已极低甚至为零的成本，实现发展的跃迁</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="AARRR-漏斗模型"><a href="#AARRR-漏斗模型" class="headerlink" title="AARRR 漏斗模型"></a>AARRR 漏斗模型</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.sohu.com/a/487162563_121124370" target="_blank" rel="noopener">一文了解增长黑客 </a></li><li><a href="https://zhuanlan.zhihu.com/p/480814512" target="_blank" rel="noopener">《硅谷增长黑客实战笔记》学习笔记</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;已极低甚至为零的成本，实现发展的跃迁&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>js中浮点数精度问题</title>
    <link href="http://yoursite.com/2022/01/17/js%E4%B8%AD%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2022/01/17/js中浮点数精度问题/</id>
    <published>2022-01-16T17:46:51.000Z</published>
    <updated>2022-01-22T10:21:00.283Z</updated>
    
    <content type="html"><![CDATA[<p>在商品的价格计算中，由于精度的需要，要把用户输入的价格从元转化为分，其转化规则如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="built_in">Number</span>(inputPrice) * <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(price)</span><br></pre></td></tr></table></figure><p>但是在测试过程中发现，输入 <code>2.01</code> 时，输出结果不为 <code>201</code> ，而是 <code>200.99999999999997</code><br>通过研究发现和 js 的数字存储方式 <code>IEEE 754</code> 有关，计算机存储数字时，由于存储方式的原因，存储的并不是准确的数字，而是有一定误差的数字，如经典的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="IEEE-754-浮点数"><a href="#IEEE-754-浮点数" class="headerlink" title="IEEE 754 浮点数"></a>IEEE 754 浮点数</h2><p><img src="/images/js/float-num.webp" alt="IEEE 754 浮点数表示"></p><p>IEEE 754 浮点数由三个域组成，分别为 sign bit (符号位)、exponent bias (指数偏移值) 和 fraction (尾数)。64 位中，sign bit 占 1 位，exponent bias 占 11 位，fraction 占 52 位。</p><h3 id="0-1-转换为二进制表示"><a href="#0-1-转换为二进制表示" class="headerlink" title="0.1 转换为二进制表示"></a>0.1 转换为二进制表示</h3><p>小数转二进制用乘 R 取整的方法，运算如下</p><table><thead><tr><th>小数</th><th>x2 的结果</th><th>整数部分</th></tr></thead><tbody><tr><td>0.1</td><td>0.2</td><td>0</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>0.4</td><td>0.8</td><td>0</td></tr><tr><td>0.8</td><td>1.6</td><td>1</td></tr><tr><td>0.6</td><td>1.2</td><td>1</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>0.4</td><td>0.8</td><td>0</td></tr><tr><td>0.8</td><td>1.6</td><td>1</td></tr><tr><td>0.6</td><td>1.2</td><td>1</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>结果 <code>0.00011001100110011…</code>(循环 <code>0011</code>), 将转换后的二进制通过科学计数法表示 <code>0.00011...</code>(无限重复 <code>0011</code>) 通过科学计数法表示则是 <code>1.10011001...(重复 1001)*2</code> - 4(偏移 4 位)</p><h5 id="指数偏移值"><a href="#指数偏移值" class="headerlink" title="指数偏移值"></a>指数偏移值</h5><p>双精度浮点数固定偏移值 (2^(11-1)-1) 加上指数实际值(即 2^-4 中的 -4) 的 11 位二进制表示。</p><h6 id="注：-exponent-bias-在-64-位中占-11-位"><a href="#注：-exponent-bias-在-64-位中占-11-位" class="headerlink" title="注： exponent bias 在 64 位中占 11 位"></a>注： exponent bias 在 64 位中占 11 位</h6><h5 id="尾数"><a href="#尾数" class="headerlink" title="尾数"></a>尾数</h5><p>fraction 占 52 位所以抽取 52 位小数（多出来的采用四舍五入制）</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001...(中间有 11 个 1001)...1010 (请注意最后四位，是 1010 而不是 1001，因为四舍五入有进位）</span><br></pre></td></tr></table></figure><h3 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h3><p>可以通过四舍五入的方式进行取整，保证数据的准确性</p><h4 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed"></a><code>toFixed</code></h4><p>具备自动四舍五入的能力</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="built_in">Number</span>((<span class="built_in">Number</span>(inputPrice) * <span class="number">100</span>).toFixed())</span><br><span class="line"><span class="built_in">console</span>.log(price)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/227951185" target="_blank" rel="noopener">0.1 + 0.2 为什么不等于 0.3–奇怪的相等与不等</a></li><li><a href="https://segmentfault.com/a/1190000016884479" target="_blank" rel="noopener">为什么 JavaScript 里面 0.1+0.2 === 0.3 是 false</a></li><li><a href="https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin" target="_blank" rel="noopener">IEEE 754</a></li><li><a href="https://zhidao.baidu.com/question/1831743003782686540.html" target="_blank" rel="noopener">十进制变二进制小数乘二取整是什么意思</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在商品的价格计算中，由于精度的需要，要把用户输入的价格从元转化为分，其转化规则如下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>antd中form表单联动</title>
    <link href="http://yoursite.com/2022/01/02/antd%E4%B8%ADform%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8/"/>
    <id>http://yoursite.com/2022/01/02/antd中form表单联动/</id>
    <published>2022-01-02T15:19:35.000Z</published>
    <updated>2022-01-02T08:16:00.334Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发过程中，经常涉及到 <code>form</code> 表单的联动，在 <code>A</code> 选项中的某个值选中时出现 <code>BCE</code> 选项，其它值选中时不显示</p><p><img src="/images/form/form-a.png" alt="选中 A 时无选项"></p><p>切换选项后新增选项</p><p><img src="/images/form/form-a-more.jpg" alt="切换选项后新增选项"></p><h3 id="监听选项的-onChange-事件实现"><a href="#监听选项的-onChange-事件实现" class="headerlink" title="监听选项的 onChange 事件实现"></a>监听选项的 <code>onChange</code> 事件实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export function CustomForm() &#123;</span><br><span class="line">  const [a, setA] = useState()</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Form.Item name=&quot;testa&quot;&gt;</span><br><span class="line">        &lt;Radio.Group onChange=&#123;(e) =&gt; setA(e.target.value)&#125;&gt;</span><br><span class="line">          &lt;Radio value=&quot;A&quot;&gt;A&lt;/Radio&gt;</span><br><span class="line">          &lt;Radio value=&quot;B&quot;&gt;B&lt;/Radio&gt;</span><br><span class="line">        &lt;/Radio.Group&gt;</span><br><span class="line">      &lt;/Form.Item&gt;</span><br><span class="line">      &#123;a === &apos;B&apos; &amp;&amp; &lt;Form.Item name=&quot;testb&quot;&gt;表单项&lt;/Form.Item&gt;&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听表单项的 <code>onChange</code> 事件来修改 <code>state</code> ，<code>state</code> 值来驱动表单项的显示，官方已不建议在 form 表单中使用 <code>onChange</code> 事件</p><h3 id="监听表单的-onValuesChange-事件实现"><a href="#监听表单的-onValuesChange-事件实现" class="headerlink" title="监听表单的 onValuesChange 事件实现"></a>监听表单的 <code>onValuesChange</code> 事件实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">export function CustomForm() &#123;</span><br><span class="line">  const [a, setA] = useState()</span><br><span class="line">  return (</span><br><span class="line">    &lt;Form</span><br><span class="line">      onValuesChange=&#123;(_, values) =&gt; &#123;</span><br><span class="line">        const &#123; testa &#125; = values</span><br><span class="line">        setA(testa)</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;Form.Item name=&quot;testa&quot;&gt;</span><br><span class="line">        &lt;Radio.Group&gt;</span><br><span class="line">          &lt;Radio value=&quot;A&quot;&gt;A&lt;/Radio&gt;</span><br><span class="line">          &lt;Radio value=&quot;B&quot;&gt;B&lt;/Radio&gt;</span><br><span class="line">        &lt;/Radio.Group&gt;</span><br><span class="line">      &lt;/Form.Item&gt;</span><br><span class="line">      &#123;a === &apos;B&apos; &amp;&amp; &lt;Form.Item name=&quot;testb&quot;&gt;表单项&lt;/Form.Item&gt;&#125;</span><br><span class="line">    &lt;/Form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听表单的 <code>onValuesChange</code> 事件来修改 <code>state</code> ，<code>state</code> 值来驱动表单项的显示</p><h3 id="自定义组件-children-的渲染实现"><a href="#自定义组件-children-的渲染实现" class="headerlink" title="自定义组件 children 的渲染实现"></a>自定义组件 <code>children</code> 的渲染实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">export function Advertise(props: RadioGroupProps) &#123;</span><br><span class="line">  const &#123; value, children, defaultValue, ...otherProps &#125; = props</span><br><span class="line">  const isShowChildren =</span><br><span class="line">    (isUndefined(value) &amp;&amp; defaultValue === 1) || value === 1</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;Radio.Group &#123;...otherProps&#125; value=&#123;value&#125; defaultValue=&#123;defaultValue&#125;&gt;</span><br><span class="line">        &#123;AdActList.map((item) =&gt; (</span><br><span class="line">          &lt;Radio key=&#123;item.value&#125; value=&#123;item.value&#125;&gt;</span><br><span class="line">            &#123;item.label&#125;</span><br><span class="line">          &lt;/Radio&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/Radio.Group&gt;</span><br><span class="line">      &#123;isShowChildren &amp;&amp; children&#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过自定义的表单驱动其它元素的渲染，把逻辑收束到组件内</p><h5 id="提示：参考-antd-官方文档实现子定义表单控件"><a href="#提示：参考-antd-官方文档实现子定义表单控件" class="headerlink" title="提示：参考 antd 官方文档实现子定义表单控件"></a>提示：参考 <code>antd</code> 官方文档实现子定义表单控件</h5><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://ant.design/components/form-cn/" target="_blank" rel="noopener">antd form 表单</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;日常开发过程中，经常涉及到 &lt;code&gt;form&lt;/code&gt; 表单的联动，在 &lt;code&gt;A&lt;/code&gt; 选项中的某个值选中时出现 &lt;code&gt;BCE&lt;/code&gt; 选项，其它值选中时不显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/form/form-a.pn
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="antd" scheme="http://yoursite.com/tags/antd/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>chorme插件开发（一）</title>
    <link href="http://yoursite.com/2021/12/12/chorme%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/12/chorme插件开发（一）/</id>
    <published>2021-12-12T15:10:30.000Z</published>
    <updated>2021-12-12T09:39:51.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>谷歌浏览器插件是一种小型的用于定制浏览器体验的程序。每个插件必须在根目录包含 <code>manifest.json</code> 来描述插件，其文件结构如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 插件根目录</span><br><span class="line">|--- manifest.json // 插件描述文件</span><br><span class="line">|--- 其它文件（图标、js 、css 等）</span><br></pre></td></tr></table></figure><h4 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a><code>manifest.json</code></h4><p>用来描述插件信息，声明插件需要的权限及相关功能的路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 必须</span></span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">3</span>, <span class="comment">// 插件版本，建议使用最新版本 v3</span></span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"My Extension"</span>, <span class="comment">// 插件名称</span></span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"versionString"</span>, <span class="comment">// 插件版本</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Recommended</span></span><br><span class="line">  "action": &#123;...&#125;,</span><br><span class="line">  "default_locale": "en", // 默认语言</span><br><span class="line">  "description": "A plain text description", // 插件描述</span><br><span class="line">  "icons": &#123;...&#125;, // 插件图标</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional</span></span><br><span class="line">  "author": ..., // 作者</span><br><span class="line">  "automation": ..., //</span><br><span class="line">  "background": &#123;</span><br><span class="line">    <span class="comment">// Required</span></span><br><span class="line">    "service_worker": "background.js", // background js</span><br><span class="line">    <span class="comment">// Optional</span></span><br><span class="line">    "type": ...</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//   "chrome_settings_overrides": &#123;...&#125;, // 已不再支持</span></span><br><span class="line"><span class="comment">//   "chrome_url_overrides": &#123;...&#125;, //  已不再支持</span></span><br><span class="line">  "commands": &#123;...&#125;, // 插件自定义右键菜单</span><br><span class="line">  "content_capabilities": ...,</span><br><span class="line">  "content_scripts": [&#123;...&#125;], // web 页面上下文中执行的 js ，可通过其实现页面与插件其它 js 的通信</span><br><span class="line">  "content_security_policy": &#123;...&#125;, // 安全策略</span><br><span class="line"><span class="comment">//   "converted_from_user_script": ...,</span></span><br><span class="line"><span class="comment">//   "cross_origin_embedder_policy": &#123;"value": "require-corp"&#125;,</span></span><br><span class="line"><span class="comment">//   "cross_origin_opener_policy": &#123;"value": "same-origin"&#125;,</span></span><br><span class="line"><span class="comment">//   "current_locale": ...,</span></span><br><span class="line"><span class="comment">//   "declarative_net_request": ...,</span></span><br><span class="line">  "devtools_page": "devtools.html", // 自定义的开发者工具页面</span><br><span class="line"><span class="comment">//   "differential_fingerprint": ...,</span></span><br><span class="line"><span class="comment">//   "event_rules": [&#123;...&#125;],</span></span><br><span class="line"><span class="comment">//   "externally_connectable": &#123;</span></span><br><span class="line"><span class="comment">//     "matches": ["*://*.example.com/*"]</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   "file_browser_handlers": [...],</span></span><br><span class="line"><span class="comment">//   "file_system_provider_capabilities": &#123;</span></span><br><span class="line"><span class="comment">//     "configurable": true,</span></span><br><span class="line"><span class="comment">//     "multiple_mounts": true,</span></span><br><span class="line"><span class="comment">//     "source": "network"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line">  "homepage_url": "https://path/to/homepage", // 插件首页</span><br><span class="line"><span class="comment">//   "host_permissions": [...],</span></span><br><span class="line"><span class="comment">//   "import": [&#123;"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&#125;],</span></span><br><span class="line"><span class="comment">//   "incognito": "spanning, split, or not_allowed",</span></span><br><span class="line"><span class="comment">//   "input_components": ...,</span></span><br><span class="line"><span class="comment">//   "key": "publicKey",</span></span><br><span class="line"><span class="comment">//   "minimum_chrome_version": "versionString",</span></span><br><span class="line"><span class="comment">//   "nacl_modules": [...],</span></span><br><span class="line"><span class="comment">//   "natively_connectable": ...,</span></span><br><span class="line"><span class="comment">//   "oauth2": ...,</span></span><br><span class="line"><span class="comment">//   "offline_enabled": true,</span></span><br><span class="line"><span class="comment">//   "omnibox": &#123;</span></span><br><span class="line"><span class="comment">//     "keyword": "aString"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line">  "optional_permissions": ["tabs"], // 可选的权限</span><br><span class="line">  "options_page": "options.html", // option 页面</span><br><span class="line">  "options_ui": &#123;</span><br><span class="line">    "chrome_style": true,</span><br><span class="line">    "page": "options.html"</span><br><span class="line">  &#125;,</span><br><span class="line">  "permissions": ["tabs"], // 插件需要的权限，需要在这里声明之后才能使用相关权限</span><br><span class="line"><span class="comment">//   "platforms": ...,</span></span><br><span class="line"><span class="comment">//   "replacement_web_app": ...,</span></span><br><span class="line"><span class="comment">//   "requirements": &#123;...&#125;,</span></span><br><span class="line"><span class="comment">//   "sandbox": [...],</span></span><br><span class="line"><span class="comment">//   "short_name": "Short Name",</span></span><br><span class="line"><span class="comment">//   "storage": &#123;</span></span><br><span class="line"><span class="comment">//     "managed_schema": "schema.json"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   "system_indicator": ...,</span></span><br><span class="line"><span class="comment">//   "tts_engine": &#123;...&#125;,</span></span><br><span class="line"><span class="comment">//   "update_url": "https://path/to/updateInfo.xml",</span></span><br><span class="line"><span class="comment">//   "version_name": "aString",</span></span><br><span class="line"><span class="comment">//   "web_accessible_resources": [...]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="content-scripts"><a href="#content-scripts" class="headerlink" title="content_scripts"></a><code>content_scripts</code></h5><p><code>Chrome</code> 插件中向页面注入脚本的一种形式（虽然名为 <code>script</code>，其实还可以包括 <code>css</code> 的），借助 <code>content-scripts</code> 我们可以实现通过配置的方式轻松向指定页面注入 <code>JS</code> 和 <code>CSS</code></p><h5 id="background"><a href="#background" class="headerlink" title="background"></a><code>background</code></h5><p>一个常驻的页面，它的生命周期是插件中所有类型页面中最长的，它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在 <code>background</code> 里面。</p><h5 id="popup"><a href="#popup" class="headerlink" title="popup"></a><code>popup</code></h5><p>点击 <code>browser_action</code> 或者 <code>page_action</code> 图标时打开的一个小窗口网页，焦点离开网页就立即关闭，一般用来做一些临时性的交互。</p><h5 id="homepage-url"><a href="#homepage-url" class="headerlink" title="homepage_url"></a><code>homepage_url</code></h5><p>开发者或者插件主页设置</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ol><li>创建好插件文件夹，添加 <code>manifest.json</code>，输入如下内容</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"插件测试"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在浏览器中访问 <code>chrome://extensions</code>，打开开发者模式。<br><img src="/images/chrome/plugins-develop-mode.png" alt="charles 代理转发"></li><li>加载解压的插件<br><img src="/images/chrome/plugins-develop-load.png" alt="charles 代理转发"></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html" target="_blank" rel="noopener">【干货】Chrome 插件(扩展)开发全攻略</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/manifest/" target="_blank" rel="noopener">manifest 文件概览</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h3&gt;&lt;p&gt;谷歌浏览器插件是一种小型的用于定制浏览器体验的程序。每个插件必须在根目录包含 &lt;code&gt;manifest.json&lt;/code&gt; 来描述插
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>代理</title>
    <link href="http://yoursite.com/2021/10/24/%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2021/10/24/代理/</id>
    <published>2021-10-23T21:30:23.000Z</published>
    <updated>2021-10-23T14:50:41.234Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发时，需要 <code>mock</code> 或请求对应的数据，选择一种合适的方式获取数据可以大大提高开发效率</p><h2 id="获取数据方式"><a href="#获取数据方式" class="headerlink" title="获取数据方式"></a>获取数据方式</h2><h3 id="本地-mock"><a href="#本地-mock" class="headerlink" title="本地 mock"></a>本地 mock</h3><ul><li>页面接口请求到达 <code>dev server</code> 之后会转发到 <code>mock</code> 服务上，然后返回 <code>mock</code> 数据</li><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li></ul><p><img src="/images/api/dev_server_mock.svg" alt="本地 mock 数据请求流程"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><code>mock</code> 数据只需要配置一次，无需后续的额外操作</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>无法服用线上接口数据</li><li>项目中可能会出现许多 <code>mock</code> 数据相关的代码</li><li>接口之间无关联性</li></ul><h3 id="直接请求线上数据"><a href="#直接请求线上数据" class="headerlink" title="直接请求线上数据"></a>直接请求线上数据</h3><ul><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li><li>通过绝对地址或者浏览器代理的方式转发请求到线上服务</li></ul><p><img src="/images/api/online_server.svg" alt="直接请求线上数据"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>通过硬编码绝对路径的方式对代码入侵较大，可以通过浏览器代理插件的方式实现对接口的转发</li><li>当接口需要登陆时，可在浏览器插件中实现注入对应环境 <code>cookie</code> 的功能</li></ul><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的插件</li><li>需要在项目之外做额外的配置</li></ul><h3 id="devServer-代理转发"><a href="#devServer-代理转发" class="headerlink" title="devServer 代理转发"></a>devServer 代理转发</h3><ul><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li><li>通过 <code>dve server</code> 把接口代理转发到对应服务上</li></ul><p><img src="/images/api/dev_server_proxy.svg" alt="devServer 代理转发请求线上数据"></p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>当接口需要登陆时，可在浏览器插件中实现把对应环境 <code>cookie</code> 注入到开发服务页面下的功能</li></ul><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的插件</li><li>需要在项目之外做额外的配置</li></ul><h3 id="charles-代理转发"><a href="#charles-代理转发" class="headerlink" title="charles 代理转发"></a>charles 代理转发</h3><ul><li>页面静态资源会按照规则转发到 <code>dev server</code>上，然后直接返回静态资源</li><li>接口请求会按照规则转发到远端服务</li></ul><p><img src="/images/api/charles_proxy.svg" alt="charles 代理转发"></p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>当接口需要登陆时，本地服务转发需要先注入对应环境的 <code>cookie</code> 才可以请求</li></ul><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li><li>便于切换环境和账号</li></ul><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的软件</li><li>需要学习 charles 相关的配置</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端开发时，需要 &lt;code&gt;mock&lt;/code&gt; 或请求对应的数据，选择一种合适的方式获取数据可以大大提高开发效率&lt;/p&gt;
&lt;h2 id=&quot;获取数据方式&quot;&gt;&lt;a href=&quot;#获取数据方式&quot; class=&quot;headerlink&quot; title=&quot;获取数据方式&quot;&gt;&lt;/a&gt;获
      
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-DNS</title>
    <link href="http://yoursite.com/2021/08/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-DNS/"/>
    <id>http://yoursite.com/2021/08/16/计算机网络-DNS/</id>
    <published>2021-08-15T23:05:40.000Z</published>
    <updated>2021-10-23T12:30:00.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常通过 <code>baidu.com</code> 访问百度的服务，这个 <code>baidu.com</code> 就是百度持有的域名（Domain Name），然而在网络中能够识别的只有 <code>IP</code> ，那就需要把域名转化为对应的 <code>IP</code> 地址。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>DNS</code> 全名叫做 <code>Domain Name System</code>, 中文叫做 <code>域名服务系统</code>，主要作用是把域名转化为网络中对应的 <code>IP</code> 地址。</p><h2 id="工作原理（以浏览器为例）"><a href="#工作原理（以浏览器为例）" class="headerlink" title="工作原理（以浏览器为例）"></a>工作原理（以浏览器为例）</h2><p><img src="/images/network/dns.svg" alt="浏览器解析域名流程"></p><ol><li>浏览器解析出地址栏中的域名</li><li>在浏览器缓存中查找是否有缓存此域名的地址</li><li>在系统中是否有缓存此域名的地址</li><li>通过 <code>UDP</code> 的方式向系统中配置的 <code>DNS</code> 服务器查找域名对应的 <code>IP</code> 地址</li><li><code>DNS</code> 服务器通过 <code>UDP</code> 向根域名服务器查找域名地址，根域名服务器返回下一个查找的顶级域名服务器的 <code>IP</code> 地址</li><li><code>DNS</code> 服务器通过 <code>UDP</code> 向顶级域名服务器查找域名地址，顶级域名服务器返回下一个查找域名服务器的 <code>IP</code> 地址，不断查找，直到找到域名对应的 <code>IP</code> 地址为止</li><li><code>DNS</code> 服务器返回域名服务器的地址</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>域名分别在浏览器、操作系统、域名服务器三个层级做了缓存以提高访问速度</li><li>获取域名时浏览器调用了操作系统的能力委托操作系统到操作系统配置的域名服务器上进行域名查找</li><li>浏览器通过递归的方式分别去浏览器、操作系统和域名服务器上查找，而域名服务器是通过迭代的方式去各级域名服务器上进行查找的</li></ul><h3 id="各层级域名节点"><a href="#各层级域名节点" class="headerlink" title="各层级域名节点"></a>各层级域名节点</h3><ul><li>域名服务器具有层级关系</li><li>每个层级的域名服务器都存储了根域名服务器的地址信息，这样方便快速查找域名服务的信息</li><li>每个层级的域名服务器都需要注册到其对应的上一级域名服务器中</li></ul><p><img src="/images/network/dns-node.svg" alt="域名服务器节点关系图"></p><h2 id="域名服务数据更新"><a href="#域名服务数据更新" class="headerlink" title="域名服务数据更新"></a>域名服务数据更新</h2><p>当域名服务系统数据有变化时就需要去更新对应的数据</p><ul><li>当根域名服务器地址有变化时，各级域名服务需要通过 <code>TCP</code> 的方式更新对应的数据</li><li>当有新的子域名服务器注册或者域名信息注销时需要子域名通过 <code>TCP</code> 的方式把更新信息同步到当前域名服务</li></ul><p><img src="/images/network/dns-update.svg" alt="域名服务器更新数据图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;通常通过 &lt;code&gt;baidu.com&lt;/code&gt; 访问百度的服务，这个 &lt;code&gt;baidu.com&lt;/code&gt; 就是百度持有的域
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染</title>
    <link href="http://yoursite.com/2021/08/08/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2021/08/08/服务端渲染/</id>
    <published>2021-08-08T13:14:02.000Z</published>
    <updated>2021-08-08T07:50:34.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h2><h3 id="环境区分"><a href="#环境区分" class="headerlink" title="环境区分"></a>环境区分</h3><p>服务端和客户端所处环境有些许区别，打包时要根据不同环境打包出对应的资源</p><h4 id="路由代码"><a href="#路由代码" class="headerlink" title="路由代码"></a>路由代码</h4><ul><li>服务端从请求对象中获取路径，需要先从请求对象中提取出路径之后再通过上下文传递进应用之中</li><li>客户端从全局路由对象中获取路径进行匹配</li></ul><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ul><li>服务端的依赖可以直接从依赖中获取，而客户端则需要把所有依赖打包到对应的 <code>chunk</code> 中</li><li>服务端不关心样式问题，而客户端需要加载对应的样式</li><li>分环境进行打包时，会导致部分资源重复打包和覆盖</li></ul><h3 id="注水和脱水"><a href="#注水和脱水" class="headerlink" title="注水和脱水"></a>注水和脱水</h3><p>服务端渲染时可能会通过接口请求数据，并保存准备好的数据状态，避免客户端做重复的请求</p><ul><li>脱水：服务端返回 <code>HTML</code> 时需要把数据状态通过字符串的形式保存在 <code>HTML</code> 字符串中。</li><li>注水：客户端通过 <code>HTML</code> 中格式化后的数据初始化状态。</li></ul><h4 id="服务端请求"><a href="#服务端请求" class="headerlink" title="服务端请求"></a>服务端请求</h4><ul><li>通过配置文件的方式统一声明服务端需要请求的数据</li><li>通过组件静态方法统一处理请求（需要框架遍历每个组件的属性去请求数据）</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p>服务端请求时不会自动携带客户端传递来的信息（例如 <code>cookie</code>） ，需要手动把请求中的字段提取出来放入服务端的请求中</p><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>服务端渲染时不需要样式，但是客户端渲染时需要处理样式问题，若通过外部引入会造成在客户端样式的抖动</p><h3 id="meta-tags-处理"><a href="#meta-tags-处理" class="headerlink" title="meta tags 处理"></a>meta tags 处理</h3><p>客户端和服务端渲染时有时需要动态修改 <code>head</code> 里的信息（SEO）</p><h3 id="404-处理"><a href="#404-处理" class="headerlink" title="404 处理"></a>404 处理</h3><p>当服务端匹配不到页面时，应该返回一个 <code>404</code> 的状态码和对应的内容</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>上述注水和脱水过程中容易存在 <code>script</code> 脚本注入的风险，在序列化之前需要对对象做转义</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li>缓存</li><li>单服务改为服务集群</li><li>服务压力过大时改成客户端渲染</li><li>升级 <code>Nodejs</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同构应用&quot;&gt;&lt;a href=&quot;#同构应用&quot; class=&quot;headerlink&quot; title=&quot;同构应用&quot;&gt;&lt;/a&gt;同构应用&lt;/h2&gt;&lt;h3 id=&quot;环境区分&quot;&gt;&lt;a href=&quot;#环境区分&quot; class=&quot;headerlink&quot; title=&quot;环境区分&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>简易的express中间件</title>
    <link href="http://yoursite.com/2021/08/07/%E7%AE%80%E6%98%93%E7%9A%84express%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2021/08/07/简易的express中间件/</id>
    <published>2021-08-07T14:51:11.000Z</published>
    <updated>2021-08-07T07:39:05.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>基于 <code>Node.js</code> 平台，快速、开放、极简的 <code>Web</code> 开发框架</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>从请求到相应过程中执行的一系列函数被称为中间件，使其具有了极高的扩展性</p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> <span class="title">middware1</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/test'</span>, <span class="function"><span class="keyword">function</span> <span class="title">middware2</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>当请求 <code>/test</code> 时，会按照 <code>middware1</code> -&gt; <code>middware2</code> 的顺序依次执行注册的中间件</p><h4 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMathch</span>(<span class="params">source, match</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> source.startsWith(match)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = &#123;</span><br><span class="line">  middwares: [],</span><br><span class="line">  use: <span class="function"><span class="keyword">function</span> (<span class="params">path, fun</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把注册的中间件放入 middwares 数组中</span></span><br><span class="line">    <span class="keyword">let</span> handler = fun</span><br><span class="line">    <span class="keyword">let</span> matchPath = path</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      matchPath = <span class="string">'/'</span></span><br><span class="line">      handler = path</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.middwares.push(&#123; handler, <span class="attr">path</span>: matchPath &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  call: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从 middwares 中提取匹配的中间件执行</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname = <span class="string">'/'</span> &#125; = req</span><br><span class="line">    <span class="keyword">const</span> middwares = <span class="keyword">this</span>.middwares.filter(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">      isMathch(pathname, item.path)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> len = middwares.length</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 index 控制执行的中间件</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      index++</span><br><span class="line">      <span class="keyword">if</span> (index &lt; len) &#123;</span><br><span class="line">        middwares[index].handler(req, res, next)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>express 调度实现<a href="https://github.com/expressjs/express/blob/master/lib/router/route.js#L98" target="_blank" rel="noopener">链接</a></li><li>express use 实现<a href="https://github.com/expressjs/express/blob/master/lib/application.js#L187" target="_blank" rel="noopener">链接</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.expressjs.com.cn/guide/writing-middleware.html" target="_blank" rel="noopener">expressjs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h2&gt;&lt;p&gt;基于 &lt;code&gt;Node.js&lt;/code&gt; 平台，快速、开放、极简的 &lt;code&gt;Web&lt;/co
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2021/08/06/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2021/08/06/跨域/</id>
    <published>2021-08-05T22:58:08.000Z</published>
    <updated>2021-08-06T14:41:22.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>当”协议+域名+端口”三者相同时，才能够相互访问资源。保证用户信息的安全，防止恶意的网站窃取数据。</p><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul><li>当前域下的 <code>js</code> 脚本不能够访问其他域下的 <code>cookie</code>、<code>localStorage</code> 和 <code>indexDB</code> 等本地存储</li><li>当前域下的 <code>js</code> 脚本不能够操作访问操作其他域下的 <code>DOM</code>。</li><li>当前域下 <code>ajax</code> 无法发送跨域请求。</li></ul><h2 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器让运行在一个 origin (domain)上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>简单请求不会触发 CORS 预检请求。需要满足以下条件才能成为简单请求</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><h5 id="HTTP-的头信息"><a href="#HTTP-的头信息" class="headerlink" title="HTTP 的头信息"></a>HTTP 的头信息</h5><p>不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul><h5 id="请求过程"><a href="#请求过程" class="headerlink" title="请求过程"></a>请求过程</h5><ol><li>浏览器会直接发出 CORS 请求，它会在请求的头信息中增加一个 Orign 字段，该字段用来说明本次请求来自哪个源（协议+端口+域名）</li><li>服务器会根据 origin 值来决定是否同意这次请求</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Access-Control-Allow-Origin:</span> <span class="string">http://api.baidu.com</span>  <span class="string">//</span> <span class="string">和</span> <span class="string">Orign</span> <span class="string">一致，必须要包含，可以为</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Credentials:</span> <span class="literal">true</span>   <span class="string">//</span> <span class="string">表示是否允许发送Cookie</span></span><br><span class="line"><span class="attr">Access-Control-Expose-Headers:</span> <span class="string">FooBar</span>   <span class="string">//</span> <span class="string">指定返回其他字段的值</span></span><br></pre></td></tr></table></figure><h4 id="非简单请求过程"><a href="#非简单请求过程" class="headerlink" title="非简单请求过程"></a>非简单请求过程</h4><p>在正式通信之前进行一次 HTTP 查询请求，称为预检请求</p><h5 id="请求过程-1"><a href="#请求过程-1" class="headerlink" title="请求过程"></a>请求过程</h5><ol><li>使用 <code>OPTIONS</code> 方法向服务端发起预检请求</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Access-Control-Request-Method：该字段是必须的，用来列出浏览器的</span> <span class="string">CORS</span> <span class="string">请求会用到哪些</span> <span class="string">HTTP</span> <span class="string">方法。</span></span><br><span class="line"><span class="string">Access-Control-Request-Headers：</span> <span class="string">该字段是一个逗号分隔的字符串，指定浏览器</span> <span class="string">CORS</span> <span class="string">请求会额外发送的头信息字段。</span></span><br></pre></td></tr></table></figure><ol start="2"><li>服务器在收到浏览器的预检请求之后，会根据头信息的三个字段来进行判断是否允许跨域</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Access-Control-Allow-Origin:</span> <span class="string">http://api.baidu.com</span>  <span class="string">//</span> <span class="string">允许跨域的源地址（必须）</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Methods:</span> <span class="string">GET,</span> <span class="string">POST,</span> <span class="string">PUT</span> <span class="string">//</span> <span class="string">服务器支持的所有跨域请求的方法（必须）</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Headers:</span> <span class="string">X-Custom-Header</span>  <span class="string">//</span> <span class="string">服务器支持的所有头信息字段（必须）</span></span><br><span class="line"><span class="attr">Access-Control-Allow-Credentials:</span> <span class="literal">true</span>   <span class="string">//</span> <span class="string">表示是否允许发送Cookie</span></span><br><span class="line"><span class="attr">Access-Control-Max-Age:</span> <span class="number">1728000</span>  <span class="string">//</span> <span class="string">用来指定本次预检请求的有效期，单位为秒</span></span><br></pre></td></tr></table></figure><h5 id="Cookie-相关问题"><a href="#Cookie-相关问题" class="headerlink" title="Cookie 相关问题"></a>Cookie 相关问题</h5><ol><li>默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 withCredentials 来进行传递 cookie.</li><li>Access-Control-Allow-Credentials 设置为 true</li><li>Access-Control-Allow-Origin 设置为非 <code>*</code></li></ol><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>利用<code>&lt;script&gt;</code> 标签没有跨域限制，通过<code>&lt;script&gt;</code>标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而前端拿到 callback 函数返回的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">src, callback</span>) </span>&#123;</span><br><span class="line">  count++</span><br><span class="line">  <span class="keyword">const</span> functionName = <span class="string">'jsonpCallback'</span> + count</span><br><span class="line">  <span class="comment">// 回调执行函数</span></span><br><span class="line">  <span class="built_in">window</span>[functionName] = <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    callback &amp;&amp; callback(res)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">  script.type = <span class="string">'text/javascript'</span></span><br><span class="line">  <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">  <span class="keyword">const</span> realSrc = src.includes(<span class="string">'?'</span>)</span><br><span class="line">    ? src + <span class="string">'&amp;callback='</span> + functionName</span><br><span class="line">    : src + <span class="string">'?callback='</span> + functionName</span><br><span class="line">  script.src = realSrc</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端实现</span></span><br><span class="line">app.get(<span class="string">'/test'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; callback &#125; = req.query</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(&#123; test: "a" &#125;)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过 <code>script</code> 标签的形式获取到的数据会被自动执行，所以通过返回回调函数调用的方式自动执行代码</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>具有局限性， 仅支持 get 方法</li><li>不安全，可能会遭受 XSS 攻击</li></ul><h3 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的 iframe 消息传递</li><li>上面三个场景的跨域数据传递</li></ul><h3 id="服务代理"><a href="#服务代理" class="headerlink" title="服务代理"></a>服务代理</h3><p>服务端转发请求</p><h3 id="document-domain-iframe"><a href="#document-domain-iframe" class="headerlink" title="document.domain + iframe"></a>document.domain + iframe</h3><p>此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。</p><h3 id="location-hash-iframe"><a href="#location-hash-iframe" class="headerlink" title="location.hash + iframe"></a>location.hash + iframe</h3><p>a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>A 与 B 不同域，A 向 B 传递消息时通过修改 B 页面的 hash 值，B 监听 hash 值的变化获取数据</li><li>A 与 C 同域，B 与 A 通信时通过修改 C 页面的 hash 值，C 通过各种手段通知 A hash 值的辩护</li></ul><h3 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h3><p>window.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>通过 <code>WebSocket</code> 服务端中转通信</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6916157109906341902/#heading-55" target="_blank" rel="noopener">如何解决跨越问题</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS" target="_blank" rel="noopener">MDN CORS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;当”协议+域名+端口”三者相同时，才能够相互访问资源。保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>术语</title>
    <link href="http://yoursite.com/2021/07/26/%E6%9C%AF%E8%AF%AD/"/>
    <id>http://yoursite.com/2021/07/26/术语/</id>
    <published>2021-07-25T22:27:21.000Z</published>
    <updated>2021-10-23T12:30:00.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ul><li>进程：资源分配的最小单位</li><li>线程：CPU 调度的最小单位</li><li>协程：协程运行在线程之上，当一个协程执行完成后，可以选择主动让出，让另一个协程运行在当前线程之上。协程并没有增加线程数量，只是在线程的基础之上通过分时复用的方式运行多个协程，而且协程的切换在用户态完成，切换的代价比线程从用户态到内核态的代价小很多。</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>URL: Uniform Resource Locator, 统一资源定位符</li><li>URI: Uniform Resource Identifier, 统一资源标识符</li><li>FTP: File Transfer Protocol, 文件传输协议</li><li>CGI: Common Gateway Interface, 通用网关接口</li><li>DNS: Domain Name System, 域名服务系统</li><li>协议栈: 操作系统内部的网络控制软件</li><li>MX: Mail eXchange, 邮件交换</li><li>UDP: User Datagram Protocol, 用户数据报协议</li><li>TCP: Transmission Control Protocol, 传输控制协议</li><li>ARP: Address Resolution Protocol, 地址解析协议</li><li>MTU: Maximum Transmission Unit, 最大传输单元</li><li>MSS: Maximum Segment Size, 最大分段大小</li><li>FCS: Frame Check Sequence, 帧校验序列</li><li>SFD: Start Frame Delimiter, 起始帧分界</li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>PaaS: Platform as a service, 平台即服务。PaaS 给用户提供的能力是使用由云服务提供商支持的编程语言、库、服务以及开发工具来创建、开发应用程序并部署在相关的基础设施上。用户无需管理底层的基础设施，包括网络、服务器，操作系统或者存储。他们只能控制部署在基础设施中操作系统上的应用程序，配置应用程序所托管的环境的可配置参数。常见的 PaaS 服务有数据库服务、web 应用以及容器服务。成熟的 PaaS 服务会简化开发人员，提供完备的 PC 端和移动端软件开发套件（SDK），拥有丰富的开发环境（Inteli、Eclipse、VS 等），完全可托管的数据库服务，可配置式的应用程序构建，支持多语言的开发，面向应用市场。</li><li>SaaS: Software as a Service, 软件即服务。SaaS 给用户提供的能力是使用在云基础架构上运行的云服务提供商的应用程序。可以通过轻量的客户端接口（诸如 web 浏览器（例如，基于 web 的电子邮件））或程序接口从各种客户端设备访问应用程序。 用户无需管理或控制底层云基础架构，包括网络，服务器，操作系统，存储甚至单独的应用程序功能，可能的例外是有限的用户特定应用程序配置设置。类似的服务有：各类的网盘(Dropbox、百度网盘等)，JIRA，GitLab 等服务。而这些应用的提供者不仅仅是云服务提供商，还有众多的第三方提供商（ISV: independent software provider）。</li><li>IaaS: Infrastructure as a service, 基础设施即服务。用户可以在云服务提供商提供的基础设施上部署和运行任何软件，包括操作系统和应用软件。用户没有权限管理和访问底层的基础设施，如服务器、交换机、硬盘等，但是有权管理操作系统、存储内容，可以安装管理应用程序，甚至是有权管理网络组件。简单的说用户使用 IaaS，有权管理操作系统之上的一切功能。我们常见的 IaaS 服务有虚拟机、虚拟网络、以及存储。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/172471249" target="_blank" rel="noopener">什么是协程？</a></li><li><a href="https://www.zhihu.com/question/25532384" target="_blank" rel="noopener">线程和进程的区别是什么？</a></li><li><a href="https://www.zhihu.com/question/20387284" target="_blank" rel="noopener">怎么理解 IaaS、SaaS 和 PaaS 的区别？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程：资源分配的最小单位&lt;/li&gt;
&lt;li&gt;线程：CPU 调度的最小单位&lt;/li&gt;
&lt;li&gt;协程：协程运行在线程
      
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>js沙箱</title>
    <link href="http://yoursite.com/2021/07/26/js%E6%B2%99%E7%AE%B1/"/>
    <id>http://yoursite.com/2021/07/26/js沙箱/</id>
    <published>2021-07-25T21:06:01.000Z</published>
    <updated>2021-07-25T14:26:02.199Z</updated>
    
    <content type="html"><![CDATA[<p>沙箱，即 <code>sandbox</code>，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>解析或执行不可信的 <code>JS</code></li><li>隔离被执行代码的执行环境</li><li>对执行代码中可访问对象进行限制</li></ul><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="with-new-Function"><a href="#with-new-Function" class="headerlink" title="with + new Function"></a><code>with</code> + <code>new Function</code></h4><p>在 <code>with</code> 的块级作用域下，变量访问会优先查找你传入的参数对象，之后再往上找，所以相当于你变相监控到了代码中的“变量访问”，结合 <code>proxy</code> 代理可以监听所有数据的修改和访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyFanctory</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="keyword">get</span>(target, p) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p === <span class="built_in">Symbol</span>.unscopables) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (target[p] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[p]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(target, p, value) &#123;</span><br><span class="line">      target[p] = value</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runWithSanbox</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> context = proxyFanctory(&#123; <span class="attr">a</span>: <span class="string">'test'</span>, <span class="attr">b</span>: &#123;&#125; &#125;)</span><br><span class="line">  <span class="keyword">const</span> codeSrc = <span class="string">`with(sandbox)&#123;<span class="subst">$&#123;code&#125;</span>&#125;`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'sandbox'</span>, codeSrc).call(context, context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runWithSanbox(</span><br><span class="line">  <span class="string">'this.b.__proto__.toString=function()&#123;console.log("__proto__.toString")&#125;;console.log(a, this)'</span></span><br><span class="line">) <span class="comment">// test Proxy &#123;a: "test"&#125;</span></span><br><span class="line"><span class="keyword">const</span> t = &#123;&#125;</span><br><span class="line">t.toString() <span class="comment">// __proto__.toString</span></span><br></pre></td></tr></table></figure><h5 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h5><ul><li><code>proxy</code> 无法监听深层次数据的访问，可以通过访问原型链的方式，实现沙箱逃逸（代码分析）</li><li><code>window</code> 等固有对象调用（<code>iframe</code> 创建隔离的上下文）</li></ul><h4 id="借助-iframe-实现"><a href="#借助-iframe-实现" class="headerlink" title="借助 iframe 实现"></a>借助 <code>iframe</code> 实现</h4><p><code>sandbox</code> 是 <code>h5</code> 的提出的一个新属性， 启用方式就是在 <code>iframe</code> 标签中使用 <code>sandbox</code> 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">sandbox</span> <span class="attr">src</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h5><ul><li><code>script</code> 脚本不能执行， <code>allow-scripts</code> 属性</li><li>不能发送 <code>ajax</code> 请求，<code>allow-same-origin</code> 允许同域请求</li></ul><p>具体参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/iframe#attr-sandbox" target="_blank" rel="noopener">iframe</a></p><h4 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a><code>Web Worker</code></h4><p><code>Web Worker</code> 子线程的形式也是一种天然的沙箱隔离</p><h5 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h5><ul><li>出于线程安全设计考虑，<code>Web Worker</code> 不支持 <code>DOM</code> 操作，必须通过 <code>postMessage</code> 通知 <code>UI</code> 主线程来实现。</li><li><code>Web Worker</code> 无法访问 <code>window</code>、<code>document</code> 之类的浏览器全局对象。</li></ul><p>通过代理将具体的渲染实现再转发给原 <code>WorkerDomNodeImpl.js</code> 逻辑来实现 <code>DOM</code> 的实际更新。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://juejin.cn/post/6844903954074058760" target="_blank" rel="noopener">说说 JS 中的沙箱</a></li><li><a href="https://developer.aliyun.com/article/761449" target="_blank" rel="noopener">如何“取巧”实现一个微前端沙箱？</a></li><li><a href="https://www.infoq.cn/article/u9dkjjleg2hp6uqhsoii" target="_blank" rel="noopener">字节跳动的微前端沙盒实践</a></li><li><a href="https://segmentfault.com/a/1190000039795656" target="_blank" rel="noopener">浅探 Web Worker 与 JavaScript 沙箱</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;沙箱，即 &lt;code&gt;sandbox&lt;/code&gt;，顾名思义，就是让你的程序跑在一个隔离的环境下，不对外界的其他程序造成影响，通过创建类似沙盒的独立作业环境，在其内部运行的程序并不能对硬盘产生永久性的影响。&lt;/p&gt;
&lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染过程详解</title>
    <link href="http://yoursite.com/2021/07/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2021/07/12/浏览器渲染过程详解/</id>
    <published>2021-07-11T16:03:29.000Z</published>
    <updated>2021-07-11T09:46:42.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><ol><li>浏览器通过网络请求后获取 <code>html</code> 数据，通过 <code>tcp</code> 传给浏览器进程，然后浏览器进程再传递给渲染器进程</li><li><code>DOM</code> - <code>DOM</code> 结构： 主线程将 <code>html</code> 解析构造 <code>DOM</code> 树</li><li><code>style</code> - 样式： 主线程解析页面的 <code>CSS</code> 从而确定每个 <code>DOM</code> 节点的计算样式（<code>computed style</code>）。</li><li><code>layoutTree</code> - 布局树： <code>dom</code>+<code>style</code> 根据 <code>dom</code> 树和样式生成 <code>layoutTree</code></li><li><code>paint</code> - 绘制： 通过遍历 <code>Layout Tree</code> 生成绘制顺序表</li><li><code>laryer</code> - 布局： 主线程将 <code>layoutTree</code> 和绘制信息表传给合成器线程</li><li>合成器线程： 将得到的信息分图层分成更小的图块</li><li>栅格线程： 将更小的图块进行栅格化 <code>raster</code>，返还给合成器线程 <code>draw quads</code> 图块信息，存储在 <code>GPU</code> 中</li><li>合成线程会收集图块上面叫做绘画四边形（<code>draw quads</code>）的信息来构建一个合成帧（<code>compositor frame</code>）。</li><li>合成线程就会通过 <code>IPC</code> 向浏览器进程（<code>browser process</code>）提交（<code>commit</code>）一个渲染帧。</li><li>浏览器进程收到一帧的图像后传给 <code>GPU</code> 进行渲染</li></ol><h4 id="非快速滚动区域-non-fast-scrollable-region"><a href="#非快速滚动区域-non-fast-scrollable-region" class="headerlink" title="非快速滚动区域 - non-fast scrollable region"></a>非快速滚动区域 - non-fast scrollable region</h4><p>当一个页面被合成的时候，合成线程会将页面那些注册了事件监听器的区域标记为“非快速滚动区域”（<code>Non-fast Scrollable Region</code>）。当用户事件发生在这些区域时，合成线程会将输入事件发送给主线程来处理。如果输入事件不是发生在非快速滚动区域，合成线程就无须主线程的参与来合成一个新的帧。</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p><code>body</code> 元素绑定了事件监听器后其实是将整个页面都标记为一个非快速滚动区域，这就意味着即使你页面的某些区域压根就不在乎是不是有用户输入，当用户输入事件发生时，合成线程每次都会告知主线程并且会等待主线程处理完它才干活。因此这种情况下合成线程就丧失提供流畅用户体验的能力了（<code>smooth scrolling ability</code>）。</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>可以为事件监听器传递 <code>passive：true</code> 选项。 这个选项会告诉浏览器您仍要在主线程中侦听事件，可是合成线程也可以继续合成新的帧。</p><h4 id="查找事件的目标对象（event-target）"><a href="#查找事件的目标对象（event-target）" class="headerlink" title="查找事件的目标对象（event target）"></a>查找事件的目标对象（event target）</h4><p>当合成线程向主线程发送输入事件时，主线程要做的第一件事是通过命中测试（<code>hit test</code>）去找到事件的目标对象（<code>target</code>）。具体的命中测试流程是遍历在渲染流水线中生成的绘画记录（<code>paint records</code>）来找到输入事件出现的 <code>x</code>, <code>y</code> 坐标上面描绘的对象是哪个。</p><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><h5 id="DOM-对象"><a href="#DOM-对象" class="headerlink" title="DOM 对象"></a>DOM 对象</h5><p>既是浏览器对当前页面的内部表示，也是 <code>Web</code> 开发人员通过 <code>JavaScript</code> 与网页进行交互的数据结构以及 <code>API</code>。</p><h5 id="光栅化（rasterizing）"><a href="#光栅化（rasterizing）" class="headerlink" title="光栅化（rasterizing）"></a>光栅化（rasterizing）</h5><p>将以上文档结构，元素的样式，元素的几何信息以及它们的绘画顺序转化为显示器的像素的过程</p><h5 id="绘画四边形"><a href="#绘画四边形" class="headerlink" title="绘画四边形"></a>绘画四边形</h5><p>包含图块在内存的位置以及图层合成后图块在页面的位置之类的信息。</p><h5 id="合成帧"><a href="#合成帧" class="headerlink" title="合成帧"></a>合成帧</h5><p>代表页面一个帧的内容的绘制四边形集合。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102149546" target="_blank" rel="noopener">一文看懂 Chrome 浏览器运行机制</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Resources" target="_blank" rel="noopener">浏览器的工作原理：新式网络浏览器幕后揭秘</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/speed/high-performance-animations/" target="_blank" rel="noopener">High Performance Animations</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1B7RE" target="_blank" rel="noopener">【干货】浏览器是如何运作的？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;渲染流程&quot;&gt;&lt;a href=&quot;#渲染流程&quot; class=&quot;headerlink&quot; title=&quot;渲染流程&quot;&gt;&lt;/a&gt;渲染流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;浏览器通过网络请求后获取 &lt;code&gt;html&lt;/code&gt; 数据，通过 &lt;code&gt;tcp&lt;/code&gt; 传给
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js执行流程</title>
    <link href="http://yoursite.com/2021/07/11/js%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/07/11/js执行流程/</id>
    <published>2021-07-10T21:58:37.000Z</published>
    <updated>2021-07-10T16:24:19.939Z</updated>
    
    <content type="html"><![CDATA[<h3 id="js-引擎"><a href="#js-引擎" class="headerlink" title="js 引擎"></a><code>js</code> 引擎</h3><table><thead><tr><th style="text-align:left">浏览器</th><th style="text-align:left"><code>JavaScript</code> 引擎</th></tr></thead><tbody><tr><td style="text-align:left">chrome</td><td style="text-align:left"><code>V8</code></td></tr><tr><td style="text-align:left">safari</td><td style="text-align:left"><code>JavaScriptCore</code></td></tr><tr><td style="text-align:left">Firefox</td><td style="text-align:left"><code>SpiderMonkey</code></td></tr><tr><td style="text-align:left">Edge</td><td style="text-align:left"><code>Chakra</code></td></tr></tbody></table><h3 id="js-执行过程"><a href="#js-执行过程" class="headerlink" title="js 执行过程"></a><code>js</code> 执行过程</h3><ol><li>对源码进行词法分析</li><li>进行语法分析</li><li>生成抽象语法树</li><li>生成可执行代码（可能有优化过程，此处代码可能是字节码或者机器码）</li><li>执行</li></ol><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>将程序源代码分解成对编程语言来说有意义的代码块，这些代码块被称为词法单元（<code>token</code>）。</p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>根据生成的 <code>Token</code> 进行语法分析。</p><h3 id="V8-引擎"><a href="#V8-引擎" class="headerlink" title="V8 引擎"></a><code>V8</code> 引擎</h3><h4 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h4><h5 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a><code>Parser</code></h5><p>负责将 <code>JavaScript</code> 源码转换为 <code>Abstract Syntax Tree</code> (<code>AST</code>)。在 <code>V8</code> 中有两个解析器用于解析 <code>JavaScript</code> 代码，分别是 <code>Parser</code> 和 <code>Pre-Parser</code> 。</p><ul><li><code>Parser</code> 解析器又称为 <code>full parser</code>（全量解析） 或者 <code>eager parser</code>（饥饿解析）。它会解析所有立即执行的代码，包括语法检查，生成 <code>AST</code>，以及确定词法作用域。</li><li><code>Pre-Parser</code> 又称为惰性解析，它只解析未被立即执行的代码（如函数），不生成 <code>AST</code> ，只确定作用域，以此来提高性能。当预解析后的代码开始执行时，才进行 <code>Parser</code> 解析。</li></ul><h5 id="Ignition"><a href="#Ignition" class="headerlink" title="Ignition"></a><code>Ignition</code></h5><p><code>interpreter</code>，即解释器，负责将 <code>AST</code> 转换为 <code>Bytecode</code>，解释执行 <code>Bytecode</code>；同时收集 <code>TurboFan</code> 优化编译所需的信息，比如函数参数的类型</p><h5 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a><code>TurboFan</code></h5><p><code>compiler</code>，即编译器，利用 <code>Ignitio</code> 所收集的类型信息，将 <code>Bytecode</code> 转换为优化的机器代码</p><h5 id="Orinoco"><a href="#Orinoco" class="headerlink" title="Orinoco"></a><code>Orinoco</code></h5><p><code>garbage collector</code>，垃圾回收模块，负责将程序不再需要的内存空间回收；</p><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ol><li>扫描所有的源代码，进行词法分析，生成 <code>Tokens</code></li><li><code>Parser</code> 解析器根据 <code>Tokens</code> 生成 <code>AST</code>，存在预编译和编译</li><li><code>Ignition</code> 解释器将 <code>AST</code> 转换为字节码，并解释执行</li><li><code>TurboFan</code> 编译器负责将热点函数优化编译为机器指令执行</li></ol><p><img src="/images/brower/js_v8.jpg" alt="执行过程"></p><h5 id="优化及优化导致的问题修复"><a href="#优化及优化导致的问题修复" class="headerlink" title="优化及优化导致的问题修复"></a>优化及优化导致的问题修复</h5><p>当 <code>Ignition</code> 开始执行 <code>JavaScript</code> 代码后，<code>V8</code> 会一直观察 <code>JavaScript</code> 代码的执行情况，并记录执行信息，如每个函数的执行次数、每次调用函数时，传递的参数类型等。</p><p>如果一个函数被调用的次数超过了内设的阈值，监视器就会将当前函数标记为热点函数（<code>Hot Function</code>），并将该函数的字节码以及执行的相关信息发送给 <code>TurboFan</code>。<code>TurboFan</code> 会根据执行信息做出一些进一步优化此代码的假设，在假设的基础上将字节码编译为优化的机器代码。如果假设成立，那么当下一次调用该函数时，就会执行优化编译后的机器代码，以提高代码的执行性能；如果假设不成立，不知道你们有没有注意到上图中有一条由 <code>optimized code</code> 指向 <code>bytecode</code> 的红色指向线。此过程叫做 <code>deoptimize</code>（优化回退），将优化编译后的机器代码还原为字节码。</p><p><img src="/images/brower/js_v8_optimize.jpg" alt="优化过程"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.bilibili.com/video/BV1zV411z7RX" target="_blank" rel="noopener">8 分钟带你了解 V8 引擎是如何运行 JS</a></li><li><a href="https://zhuanlan.zhihu.com/p/73768338" target="_blank" rel="noopener">JavaScript 深入浅出第 4 课：V8 引擎是如何工作的？</a></li><li><a href="https://v8.dev/blog/launching-ignition-and-turbofan" target="_blank" rel="noopener">Launching Ignition and TurboFan</a></li><li><a href="https://segmentfault.com/a/1190000022062181" target="_blank" rel="noopener">JavaScript 引擎（V8）是如何工作的</a></li><li><a href="https://mlib.wang/2020/02/08/v8-parser-compiler-javascript/" target="_blank" rel="noopener">V8 是如何怎么处理 JavaScript 的</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;js-引擎&quot;&gt;&lt;a href=&quot;#js-引擎&quot; class=&quot;headerlink&quot; title=&quot;js 引擎&quot;&gt;&lt;/a&gt;&lt;code&gt;js&lt;/code&gt; 引擎&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>react中hooks实现原理</title>
    <link href="http://yoursite.com/2021/06/28/react%E4%B8%ADhooks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2021/06/28/react中hooks实现原理/</id>
    <published>2021-06-27T22:34:04.000Z</published>
    <updated>2021-08-08T15:04:52.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以客户端-useState-为例"><a href="#以客户端-useState-为例" class="headerlink" title="以客户端 useState 为例"></a>以客户端 <code>useState</code> 为例</h3><ol><li>声明 <code>useState</code>，通过 <code>ReactCurrentDispatcher.current</code> 来实现</li><li><code>ReactCurrentDispatcher.current</code> 的赋值是在 <code>packages/react-reconciler/src/ReactFiberHooks</code> 文件中区分挂载、更新和重新渲染分别实现的</li></ol><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberHooks.new.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = mountWorkInProgressHook()</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'function'</span>) &#123;</span><br><span class="line">    initialState = initialState()</span><br><span class="line">  &#125;</span><br><span class="line">  hook.memoizedState = hook.baseState = initialState</span><br><span class="line">  <span class="keyword">const</span> queue = (hook.queue = &#123;</span><br><span class="line">    pending: <span class="literal">null</span>,</span><br><span class="line">    interleaved: <span class="literal">null</span>,</span><br><span class="line">    lanes: NoLanes,</span><br><span class="line">    dispatch: <span class="literal">null</span>,</span><br><span class="line">    lastRenderedReducer: basicStateReducer,</span><br><span class="line">    lastRenderedState: initialState,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> dispatch = (queue.dispatch = dispatchAction.bind(</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    currentlyRenderingFiber,</span><br><span class="line">    queue</span><br><span class="line">  ))</span><br><span class="line">  <span class="keyword">return</span> [hook.memoizedState, dispatch]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountWorkInProgressHook</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = &#123;</span><br><span class="line">    memoizedState: <span class="literal">null</span>,</span><br><span class="line">    baseState: <span class="literal">null</span>,</span><br><span class="line">    baseQueue: <span class="literal">null</span>,</span><br><span class="line">    queue: <span class="literal">null</span>,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (workInProgressHook === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the first hook in the list</span></span><br><span class="line">    currentlyRenderingFiber.memoizedState = workInProgressHook = hook</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Append to the end of the list</span></span><br><span class="line">    workInProgressHook = workInProgressHook.next = hook</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workInProgressHook</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactFiberHooks.new.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> updateReducer(basicStateReducer, initialState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateReducer</span>(<span class="params">reducer, initialArg, init</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = updateWorkInProgressHook()</span><br><span class="line">  <span class="keyword">const</span> queue = hook.queue</span><br><span class="line"></span><br><span class="line">  queue.lastRenderedReducer = reducer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> current = currentHook</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The last rebase update that is NOT part of the base state.</span></span><br><span class="line">  <span class="keyword">let</span> baseQueue = current.baseQueue</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The last pending update that hasn't been processed yet.</span></span><br><span class="line">  <span class="keyword">const</span> pendingQueue = queue.pending</span><br><span class="line">  <span class="keyword">if</span> (pendingQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// We have new updates that haven't been processed yet.</span></span><br><span class="line">    <span class="comment">// We'll add them to the base queue.</span></span><br><span class="line">    <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Merge the pending queue and the base queue.</span></span><br><span class="line">      <span class="keyword">const</span> baseFirst = baseQueue.next</span><br><span class="line">      <span class="keyword">const</span> pendingFirst = pendingQueue.next</span><br><span class="line">      baseQueue.next = pendingFirst</span><br><span class="line">      pendingQueue.next = baseFirst</span><br><span class="line">    &#125;</span><br><span class="line">    current.baseQueue = baseQueue = pendingQueue</span><br><span class="line">    queue.pending = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// We have a queue to process.</span></span><br><span class="line">    <span class="keyword">const</span> first = baseQueue.next</span><br><span class="line">    <span class="keyword">let</span> newState = current.baseState</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newBaseState = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> newBaseQueueFirst = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> newBaseQueueLast = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> update = first</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> updateLane = update.lane</span><br><span class="line">      <span class="keyword">if</span> (!isSubsetOfLanes(renderLanes, updateLane)) &#123;</span><br><span class="line">        <span class="comment">// Priority is insufficient. Skip this update. If this is the first</span></span><br><span class="line">        <span class="comment">// skipped update, the previous update/state is the new base</span></span><br><span class="line">        <span class="comment">// update/state.</span></span><br><span class="line">        <span class="keyword">const</span> clone = &#123;</span><br><span class="line">          lane: updateLane,</span><br><span class="line">          action: update.action,</span><br><span class="line">          eagerReducer: update.eagerReducer,</span><br><span class="line">          eagerState: update.eagerState,</span><br><span class="line">          next: <span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">          newBaseQueueFirst = newBaseQueueLast = clone</span><br><span class="line">          newBaseState = newState</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newBaseQueueLast = newBaseQueueLast.next = clone</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Update the remaining priority in the queue.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Don't need to accumulate this. Instead, we can remove</span></span><br><span class="line">        <span class="comment">// renderLanes from the original lanes.</span></span><br><span class="line">        currentlyRenderingFiber.lanes = mergeLanes(</span><br><span class="line">          currentlyRenderingFiber.lanes,</span><br><span class="line">          updateLane</span><br><span class="line">        )</span><br><span class="line">        markSkippedUpdateLanes(updateLane)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This update does have sufficient priority.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newBaseQueueLast !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> clone = &#123;</span><br><span class="line">            <span class="comment">// This update is going to be committed so we never want uncommit</span></span><br><span class="line">            <span class="comment">// it. Using NoLane works because 0 is a subset of all bitmasks, so</span></span><br><span class="line">            <span class="comment">// this will never be skipped by the check above.</span></span><br><span class="line">            lane: NoLane,</span><br><span class="line">            action: update.action,</span><br><span class="line">            eagerReducer: update.eagerReducer,</span><br><span class="line">            eagerState: update.eagerState,</span><br><span class="line">            next: <span class="literal">null</span>,</span><br><span class="line">          &#125;</span><br><span class="line">          newBaseQueueLast = newBaseQueueLast.next = clone</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Process this update.</span></span><br><span class="line">        <span class="keyword">if</span> (update.eagerReducer === reducer) &#123;</span><br><span class="line">          <span class="comment">// If this update was processed eagerly, and its reducer matches the</span></span><br><span class="line">          <span class="comment">// current reducer, we can use the eagerly computed state.</span></span><br><span class="line">          newState = update.eagerState</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> action = update.action</span><br><span class="line">          newState = reducer(newState, action)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      update = update.next</span><br><span class="line">    &#125; <span class="keyword">while</span> (update !== <span class="literal">null</span> &amp;&amp; update !== first)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">      newBaseState = newState</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newBaseQueueLast.next = newBaseQueueFirst</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mark that the fiber performed work, but only if the new state is</span></span><br><span class="line">    <span class="comment">// different from the current state.</span></span><br><span class="line">    <span class="keyword">if</span> (!is(newState, hook.memoizedState)) &#123;</span><br><span class="line">      markWorkInProgressReceivedUpdate()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook.memoizedState = newState</span><br><span class="line">    hook.baseState = newBaseState</span><br><span class="line">    hook.baseQueue = newBaseQueueLast</span><br><span class="line"></span><br><span class="line">    queue.lastRenderedState = newState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Interleaved updates are stored on a separate queue. We aren't going to</span></span><br><span class="line">  <span class="comment">// process them during this render, but we do need to track which lanes</span></span><br><span class="line">  <span class="comment">// are remaining.</span></span><br><span class="line">  <span class="keyword">const</span> lastInterleaved = queue.interleaved</span><br><span class="line">  <span class="keyword">if</span> (lastInterleaved !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> interleaved = lastInterleaved</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> interleavedLane = interleaved.lane</span><br><span class="line">      currentlyRenderingFiber.lanes = mergeLanes(</span><br><span class="line">        currentlyRenderingFiber.lanes,</span><br><span class="line">        interleavedLane</span><br><span class="line">      )</span><br><span class="line">      markSkippedUpdateLanes(interleavedLane)</span><br><span class="line">      interleaved = interleaved.next</span><br><span class="line">    &#125; <span class="keyword">while</span> (interleaved !== lastInterleaved)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (baseQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// `queue.lanes` is used for entangling transitions. We can set it back to</span></span><br><span class="line">    <span class="comment">// zero once the queue is empty.</span></span><br><span class="line">    queue.lanes = NoLanes</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch = (queue.dispatch: any)</span><br><span class="line">  <span class="keyword">return</span> [hook.memoizedState, dispatch]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重渲染"><a href="#重渲染" class="headerlink" title="重渲染"></a>重渲染</h4><h4 id="dispatchAction"><a href="#dispatchAction" class="headerlink" title="dispatchAction"></a><code>dispatchAction</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAction</span>(<span class="params">fiber, queue, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> eventTime = requestEventTime()</span><br><span class="line">  <span class="keyword">const</span> lane = requestUpdateLane(fiber)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> update = &#123;</span><br><span class="line">    lane,</span><br><span class="line">    action,</span><br><span class="line">    eagerReducer: <span class="literal">null</span>,</span><br><span class="line">    eagerState: <span class="literal">null</span>,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> alternate = fiber.alternate</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    fiber === currentlyRenderingFiber ||</span><br><span class="line">    (alternate !== <span class="literal">null</span> &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class="line">  ) &#123;</span><br><span class="line">    didScheduleRenderPhaseUpdateDuringThisPass =</span><br><span class="line">      didScheduleRenderPhaseUpdate = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> pending = queue.pending</span><br><span class="line">    <span class="keyword">if</span> (pending === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// This is the first update. Create a circular list.</span></span><br><span class="line">      update.next = update</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      update.next = pending.next</span><br><span class="line">      pending.next = update</span><br><span class="line">    &#125;</span><br><span class="line">    queue.pending = update</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其它情况更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="basicStateReducer"><a href="#basicStateReducer" class="headerlink" title="basicStateReducer"></a><code>basicStateReducer</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">basicStateReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> action === <span class="string">'function'</span> ? action(state) : action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的 <code>hooks</code> 都是挂载在 <code>ReactCurrentDispatcher</code> 对象上的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = useState()</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;a&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Test /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>) || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译之后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _useState = (<span class="number">0</span>, _react.useState)(<span class="number">0</span>), <span class="comment">// 等价于 _useState = _react.useState(0)</span></span><br><span class="line">    _useState2 = _slicedToArray(_useState, <span class="number">2</span>),</span><br><span class="line">    a = _useState2[<span class="number">0</span>],</span><br><span class="line">    setA = _useState2[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> _react2.default.createElement(<span class="string">'div'</span>, <span class="literal">null</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_reactDom2.default.render(</span><br><span class="line">  _react2.default.createElement(Test, <span class="literal">null</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>) || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>编译后实际是把函数组件当作参数传递下去了</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/b9ac8fa849f1" target="_blank" rel="noopener">React Hooks 原理</a></li><li><a href="https://www.cnblogs.com/cczlovexw/p/13565085.html" target="_blank" rel="noopener">React Hook 的底层实现原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/48584310" target="_blank" rel="noopener">阅读源码后，来讲讲 React Hooks 是怎么实现的</a></li><li><a href="https://zhuanlan.zhihu.com/p/75146261" target="_blank" rel="noopener">React Hook 的实现原理和最佳实践</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以客户端-useState-为例&quot;&gt;&lt;a href=&quot;#以客户端-useState-为例&quot; class=&quot;headerlink&quot; title=&quot;以客户端 useState 为例&quot;&gt;&lt;/a&gt;以客户端 &lt;code&gt;useState&lt;/code&gt; 为例&lt;/h3&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react从dom.render到初次组件渲染完成</title>
    <link href="http://yoursite.com/2021/06/20/react%E4%BB%8Edom-render%E5%88%B0%E5%88%9D%E6%AC%A1%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%AE%8C%E6%88%90/"/>
    <id>http://yoursite.com/2021/06/20/react从dom-render到初次组件渲染完成/</id>
    <published>2021-06-19T22:12:44.000Z</published>
    <updated>2021-06-20T06:39:35.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从-dom-render-到初次组件渲染完成"><a href="#从-dom-render-到初次组件渲染完成" class="headerlink" title="从 dom.render 到初次组件渲染完成"></a>从 <code>dom.render</code> 到初次组件渲染完成</h2><ol><li><code>render(element,container,callback)</code> 调用 <code>legacyRenderSubtreeIntoContainer(null,element,container,false,callback)</code></li><li><code>legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback)</code> 调用<code>legacyCreateRootFromDOMContainer(container,false)</code> 创建容器并赋值给 <code>container._reactRootContainer</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-dom/src/client/ReactDOMLegacy.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">legacyRenderSubtreeIntoContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  forceHydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?Function</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> root = container._reactRootContainer</span><br><span class="line">  <span class="keyword">let</span> fiberRoot: FiberRoot</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(</span><br><span class="line">      container,</span><br><span class="line">      forceHydrate</span><br><span class="line">    )</span><br><span class="line">    fiberRoot = root._internalRoot</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originalCallback = callback</span><br><span class="line">      callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> instance = getPublicRootInstance(fiberRoot)</span><br><span class="line">        originalCallback.call(instance)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化同步更新</span></span><br><span class="line">    unbatchedUpdates(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      updateContainer(children, fiberRoot, parentComponent, callback)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getPublicRootInstance(fiberRoot)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 <code>unbatchedUpdates</code> 同步更新容器元素并调用回调函数</li></ol><h3 id="构建容器"><a href="#构建容器" class="headerlink" title="构建容器"></a>构建容器</h3><ol><li><code>legacyCreateRootFromDOMContainer</code> 调用 <code>createLegacyRoot(container)</code> 构建容器</li><li>调用 <code>new ReactDOMLegacyRoot(container)</code> 构建实例</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-dom/src/client/ReactDOMRoot.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createLegacyRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: RootOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">RootType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReactDOMLegacyRoot(container, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>构造函数中调用 <code>createRootImpl(container, ConcurrentRoot)</code> 创建根容器并赋值给 <code>_internalRoot</code> 属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-dom/src/client/ReactDOMRoot.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReactDOMLegacyRoot</span>(<span class="params">container: Container, options: void | RootOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._internalRoot = createRootImpl(container, LegacyRoot, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOMLegacyRoot.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">children: ReactNodeList</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">this</span>._internalRoot</span><br><span class="line">  updateContainer(children, root, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOMLegacyRoot.prototype.unmount = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="keyword">this</span>._internalRoot</span><br><span class="line">  <span class="keyword">const</span> container = root.containerInfo</span><br><span class="line">  updateContainer(<span class="literal">null</span>, root, <span class="literal">null</span>, () =&gt; &#123;</span><br><span class="line">    unmarkContainerAsRoot(container)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRootImpl</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  container: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: RootTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  options: void | RootOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = createContainer(container, tag)</span><br><span class="line">  markContainerAsRoot(root.current, container)</span><br><span class="line">  <span class="keyword">const</span> rootContainerElement =</span><br><span class="line">    container.nodeType === COMMENT_NODE ? container.parentNode : container</span><br><span class="line">  listenToAllSupportedEvents(rootContainerElement)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>调用 <code>createContainer(container, ConcurrentRoot)</code> 构建根元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactFiberRoot.old.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: Container,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: RootTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrationCallbacks: null | SuspenseHydrationCallbacks,</span></span></span><br><span class="line"><span class="function"><span class="params">  isStrictMode: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  concurrentUpdatesByDefaultOverride: null | boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">OpaqueRoot</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createFiberRoot(</span><br><span class="line">    containerInfo,</span><br><span class="line">    tag,</span><br><span class="line">    hydrate,</span><br><span class="line">    hydrationCallbacks,</span><br><span class="line">    isStrictMode,</span><br><span class="line">    concurrentUpdatesByDefaultOverride</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.  调用 `new FiberRootNode(container, ConcurrentRoot)` 构建根元素</span></span><br><span class="line"><span class="comment">// 2.  调用 `createHostRootFiber` 构建 `Fiber`</span></span><br><span class="line"><span class="comment">// 3.  初始化更新队列</span></span><br><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactFiberRoot.old.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFiberRoot</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  containerInfo: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag: RootTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrate: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrationCallbacks: null | SuspenseHydrationCallbacks,</span></span></span><br><span class="line"><span class="function"><span class="params">  isStrictMode: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  concurrentUpdatesByDefaultOverride: null | boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">FiberRoot</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root: FiberRoot = <span class="keyword">new</span> FiberRootNode(containerInfo, tag, hydrate)</span><br><span class="line">  <span class="keyword">const</span> uninitializedFiber = createHostRootFiber(</span><br><span class="line">    tag,</span><br><span class="line">    isStrictMode,</span><br><span class="line">    concurrentUpdatesByDefaultOverride</span><br><span class="line">  )</span><br><span class="line">  root.current = uninitializedFiber</span><br><span class="line">  uninitializedFiber.stateNode = root</span><br><span class="line">  <span class="keyword">const</span> initialState = &#123; <span class="attr">element</span>: <span class="literal">null</span> &#125;</span><br><span class="line">  uninitializedFiber.memoizedState = initialState</span><br><span class="line">  initializeUpdateQueue(uninitializedFiber)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FiberRootNode</span>(<span class="params">containerInfo, tag, hydrate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.tag = tag</span><br><span class="line">  <span class="keyword">this</span>.containerInfo = containerInfo</span><br><span class="line">  <span class="keyword">this</span>.pendingChildren = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.current = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.pingCache = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.finishedWork = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.timeoutHandle = noTimeout</span><br><span class="line">  <span class="keyword">this</span>.context = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.pendingContext = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.hydrate = hydrate</span><br><span class="line">  <span class="keyword">this</span>.callbackNode = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.callbackPriority = NoLane</span><br><span class="line">  <span class="keyword">this</span>.eventTimes = createLaneMap(NoLanes)</span><br><span class="line">  <span class="keyword">this</span>.expirationTimes = createLaneMap(NoTimestamp)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pendingLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.suspendedLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.pingedLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.expiredLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.mutableReadLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.finishedLanes = NoLanes</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.entangledLanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.entanglements = createLaneMap(NoLanes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactFiber.old.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHostRootFiber</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: RootTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  isStrictMode: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  concurrentUpdatesByDefaultOverride: null | boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mode</span><br><span class="line">  <span class="keyword">if</span> (tag === ConcurrentRoot) &#123;</span><br><span class="line">    mode = ConcurrentMode</span><br><span class="line">    <span class="keyword">if</span> (isStrictMode === <span class="literal">true</span>) &#123;</span><br><span class="line">      mode |= StrictLegacyMode</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (enableStrictEffects) &#123;</span><br><span class="line">        mode |= StrictEffectsMode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (enableStrictEffects &amp;&amp; createRootStrictEffectsByDefault) &#123;</span><br><span class="line">      mode |= StrictLegacyMode | StrictEffectsMode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !enableSyncDefaultUpdates ||</span><br><span class="line">      (allowConcurrentByDefault &amp;&amp; concurrentUpdatesByDefaultOverride)</span><br><span class="line">    ) &#123;</span><br><span class="line">      mode |= ConcurrentUpdatesByDefaultMode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mode = NoMode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer &amp;&amp; isDevToolsPresent) &#123;</span><br><span class="line">    mode |= ProfileMode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> createFiber(HostRoot, <span class="literal">null</span>, <span class="literal">null</span>, mode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FiberNode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: WorkTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: mixed,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: null | string,</span></span></span><br><span class="line"><span class="function"><span class="params">  mode: TypeOfMode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Instance</span></span><br><span class="line">  <span class="keyword">this</span>.tag = tag</span><br><span class="line">  <span class="keyword">this</span>.key = key</span><br><span class="line">  <span class="keyword">this</span>.elementType = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.type = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.stateNode = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fiber</span></span><br><span class="line">  <span class="keyword">this</span>.return = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.child = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.sibling = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.ref = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pendingProps = pendingProps</span><br><span class="line">  <span class="keyword">this</span>.memoizedProps = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.updateQueue = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.memoizedState = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.dependencies = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.mode = mode</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effects</span></span><br><span class="line">  <span class="keyword">this</span>.flags = NoFlags</span><br><span class="line">  <span class="keyword">this</span>.subtreeFlags = NoFlags</span><br><span class="line">  <span class="keyword">this</span>.deletions = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lanes = NoLanes</span><br><span class="line">  <span class="keyword">this</span>.childLanes = NoLanes</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.alternate = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFiber</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  tag: WorkTag,</span></span></span><br><span class="line"><span class="function"><span class="params">  pendingProps: mixed,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: null | string,</span></span></span><br><span class="line"><span class="function"><span class="params">  mode: TypeOfMode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> FiberNode(tag, pendingProps, key, mode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>调用<code>markContainerAsRoot(root.current, container)</code>标记根元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-dom/src/client/ReactDOMComponentTree.js</span></span><br><span class="line"><span class="keyword">const</span> randomKey = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">const</span> internalContainerInstanceKey = <span class="string">'__reactContainer$'</span> + randomKey</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">markContainerAsRoot</span>(<span class="params">hostRoot: Fiber, node: Container</span>) </span>&#123;</span><br><span class="line">  node[internalContainerInstanceKey] = hostRoot</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>调用<code>listenToAllSupportedEvents(rootContainerElement)</code> 向根元素上注册所有原生监听事件，但 <code>selectionchange</code> 事件注册在 <code>document</code> 上</li></ol><h4 id="构建的容器"><a href="#构建的容器" class="headerlink" title="构建的容器"></a>构建的容器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> container =<span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line"><span class="keyword">const</span> root = container._reactRootContainer = &#123;</span><br><span class="line">  _internalRoot: &#123;</span><br><span class="line">    tag: RootTag,</span><br><span class="line">    containerInfo: container,</span><br><span class="line">    pendingChildren: <span class="literal">null</span>,</span><br><span class="line">    current: <span class="literal">null</span>,</span><br><span class="line">    pingCache: <span class="literal">null</span>,</span><br><span class="line">    finishedWork: <span class="literal">null</span>,</span><br><span class="line">    timeoutHandle: noTimeout</span><br><span class="line">    context: <span class="literal">null</span>,</span><br><span class="line">    pendingContext: <span class="literal">null</span>,</span><br><span class="line">    hydrate: hydrate,</span><br><span class="line">    callbackNode: <span class="literal">null</span>,</span><br><span class="line">    callbackPriority: NoLane,</span><br><span class="line">    eventTimes: [NoLanes],</span><br><span class="line">    expirationTimes: [NoTimestamp],</span><br><span class="line">    pendingLanes: NoLanes,</span><br><span class="line">    suspendedLanes: NoLanes,</span><br><span class="line">    pingedLanes: NoLanes,</span><br><span class="line">    expiredLanes: NoLanes,</span><br><span class="line">    mutableReadLanes: NoLanes,</span><br><span class="line">    finishedLanes: NoLanes,</span><br><span class="line">    entangledLanes: NoLanes,</span><br><span class="line">    entanglements: [NoLanes],</span><br><span class="line">  &#125;,</span><br><span class="line">  current: &#123;</span><br><span class="line">    tag: tag,</span><br><span class="line">    key: key,</span><br><span class="line">    elementType: <span class="literal">null</span>,</span><br><span class="line">    type: <span class="literal">null</span>,</span><br><span class="line">    stateNode: root,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fiber</span></span><br><span class="line">    <span class="keyword">return</span>: <span class="literal">null</span>,</span><br><span class="line">    child: <span class="literal">null</span>,</span><br><span class="line">    sibling: <span class="literal">null</span>,</span><br><span class="line">    index: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    ref: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    pendingProps: pendingProps,</span><br><span class="line">    memoizedProps: <span class="literal">null</span>,</span><br><span class="line">    updateQueue: <span class="literal">null</span>,</span><br><span class="line">    memoizedState: &#123; <span class="attr">element</span>: <span class="literal">null</span> &#125;,</span><br><span class="line">    dependencies: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    mode: NoMode,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Effects</span></span><br><span class="line">    flags: NoFlags,</span><br><span class="line">    subtreeFlags: NoFlags,</span><br><span class="line">    deletions: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    lanes: NoLanes,</span><br><span class="line">    childLanes: NoLanes,</span><br><span class="line"></span><br><span class="line">    alternate: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fiberRoot = root._internalRoot</span><br><span class="line">container[<span class="string">'__reactContainer$'</span> + randomKey] = root.current</span><br></pre></td></tr></table></figure><h3 id="更新容器"><a href="#更新容器" class="headerlink" title="更新容器"></a>更新容器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactFiberReconciler.old.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateContainer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactNodeList,</span></span></span><br><span class="line"><span class="function"><span class="params">  container: OpaqueRoot,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentComponent: ?React$Component&lt;any, any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: ?Function</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Lane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> current = container.current</span><br><span class="line">  <span class="keyword">const</span> eventTime = requestEventTime() <span class="comment">// 获取更新时间</span></span><br><span class="line">  <span class="keyword">const</span> lane = requestUpdateLane(current) <span class="comment">// 获取更新任务的优先级</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> context = getContextForSubtree(parentComponent) <span class="comment">// 获取 context</span></span><br><span class="line">  <span class="keyword">if</span> (container.context === <span class="literal">null</span>) &#123;</span><br><span class="line">    container.context = context</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    container.pendingContext = context</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> update = createUpdate(eventTime, lane) <span class="comment">// 构建一次更新</span></span><br><span class="line">  update.payload = &#123; element &#125;</span><br><span class="line"></span><br><span class="line">  callback = callback === <span class="literal">undefined</span> ? <span class="literal">null</span> : callback</span><br><span class="line">  <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    update.callback = callback</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enqueueUpdate(current, update, lane)</span><br><span class="line">  <span class="keyword">const</span> root = scheduleUpdateOnFiber(current, lane, eventTime)</span><br><span class="line">  <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">    entangleTransitions(root, current, lane)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> lane</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取更新优先级，位数越底，优先级越高</li><li>获取 <code>context</code></li><li>通过 <code>createUpdate</code> 创建更新</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactUpdateQueue.old.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createUpdate</span>(<span class="params">eventTime: number, lane: Lane</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> update = &#123;</span><br><span class="line">    eventTime,</span><br><span class="line">    lane,</span><br><span class="line">    tag: UpdateState,</span><br><span class="line">    payload: <span class="literal">null</span>,</span><br><span class="line">    callback: <span class="literal">null</span>,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> update</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过 <code>enqueueUpdate</code> 把更新放入更新队列</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file: packages/react-reconciler/src/ReactUpdateQueue.old.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">enqueueUpdate</span>&lt;<span class="title">State</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  update: Update&lt;State&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  lane: Lane</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> updateQueue = fiber.updateQueue</span><br><span class="line">  <span class="keyword">if</span> (updateQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 卸载时执行</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> sharedQueue = updateQueue.shared</span><br><span class="line">  <span class="comment">// 正在更新</span></span><br><span class="line">  <span class="keyword">if</span> (isInterleavedUpdate(fiber, lane)) &#123;</span><br><span class="line">    <span class="keyword">const</span> interleaved = sharedQueue.interleaved</span><br><span class="line">    <span class="keyword">if</span> (interleaved === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 构建更新环，并放入更新队列</span></span><br><span class="line">      update.next = update</span><br><span class="line">      pushInterleavedQueue(sharedQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      update.next = interleaved.next</span><br><span class="line">      interleaved.next = update</span><br><span class="line">    &#125;</span><br><span class="line">    sharedQueue.interleaved = update</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pending = sharedQueue.pending</span><br><span class="line">    <span class="keyword">if</span> (pending === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 构建更新环，并放入更新队列</span></span><br><span class="line">      update.next = update</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      update.next = pending.next</span><br><span class="line">      pending.next = update</span><br><span class="line">    &#125;</span><br><span class="line">    sharedQueue.pending = update</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>通过 <code>scheduleUpdateOnFiber</code> 调度更新</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从-dom-render-到初次组件渲染完成&quot;&gt;&lt;a href=&quot;#从-dom-render-到初次组件渲染完成&quot; class=&quot;headerlink&quot; title=&quot;从 dom.render 到初次组件渲染完成&quot;&gt;&lt;/a&gt;从 &lt;code&gt;dom.render&lt;/
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
</feed>
