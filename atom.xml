<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奔跑的蜗牛</title>
  
  <subtitle>奔跑的蜗牛</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-09-23T15:28:01.692Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>奔跑的蜗牛</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zustand</title>
    <link href="http://example.com/2024/09/24/zustand/"/>
    <id>http://example.com/2024/09/24/zustand/</id>
    <published>2024-09-23T23:03:04.000Z</published>
    <updated>2024-09-23T15:28:01.692Z</updated>
    
    <content type="html"><![CDATA[<p>一个精简、高效且可扩展的状态管理方案，它巧妙地运用了简化的 Flux 原则。该方案提供了一套基于 Hooks 的直观 API，既简洁易用，又避免了冗余代码和强制性的框架偏好，让开发者能够更专注于业务逻辑的实现。</p><h2 id="Flux-原则"><a href="#Flux-原则" class="headerlink" title="Flux 原则"></a>Flux 原则</h2><p>Flux 原则主要围绕“单向数据流”这一核心概念展开，旨在通过清晰的数据流和组件间的解耦来提高应用的可维护性和可扩展性。</p><h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><ul><li>定义：在 Flux 应用中，数据的变化严格遵循单一方向流动的原则，即数据只能从一个源头流出，经过一系列的处理后，最终更新到视图层进行展示。</li><li>作用：单向数据流有助于减少数据流向的复杂性，使得数据的变化更加可预测和易于追踪。</li></ul><h3 id="核心组成部分"><a href="#核心组成部分" class="headerlink" title="核心组成部分"></a>核心组成部分</h3><p>Flux 架构通常包括四个核心组成部分：View（视图）、Action（动作）、Dispatcher（分发器）和 Store（存储器）。</p><ul><li>View（视图）：负责渲染 UI 界面，并通过用户交互产生 Action。</li><li>Action（动作）：是一个包含了类型（type）和数据的对象，用于描述发生了什么。Action 是数据变化的唯一来源。</li><li>Dispatcher（分发器）：接收 Action，并将其分发给所有已注册的回调函数。Dispatcher 本身不存储任何数据或状态。</li><li>Store（存储器）：负责存储应用的状态，并根据接收到的 Action 来更新状态。Store 是应用状态的唯一来源。</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="/images/zustand_flux.png" alt="工作流程"></p><ul><li>当用户在视图层进行交互时，会产生一个 Action。</li><li>Action 被发送到 Dispatcher。</li><li>Dispatcher 将 Action 广播给所有已注册的 Store。</li><li>Store 根据 Action 的类型和内容来更新自身的状态。</li><li>Store 更新状态后，会通知视图层进行相应的渲染。</li></ul><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>预测性：由于数据变化遵循严格的单向流动，因此可以更容易地预测应用的状态变化。</li><li>解耦：View、Action、Dispatcher 和 Store 之间相对独立，降低了组件间的耦合度。</li><li>可维护性：清晰的数据流和组件间的解耦使得应用更加容易维护和扩展。</li></ul><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>内部通过 <a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore#"><code>useSyncExternalStore</code></a> 实现，<code>useSyncExternalStore</code> 一个让你订阅外部 <code>store</code> 的 <code>React Hook</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// todoStore.js</span></span><br><span class="line"><span class="comment">// 这是一个第三方 store 的例子，</span></span><br><span class="line"><span class="comment">// 你可能需要把它与 React 集成。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你的应用完全由 React 构建，</span></span><br><span class="line"><span class="comment">// 我们推荐使用 React state 替代。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextId = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> todos = [&#123; <span class="attr">id</span>: nextId++, <span class="attr">text</span>: <span class="string">&#x27;Todo #1&#x27;</span> &#125;]</span><br><span class="line"><span class="keyword">let</span> listeners = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> todosStore = &#123;</span><br><span class="line">  <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    todos = [...todos, &#123; <span class="attr">id</span>: nextId++, <span class="attr">text</span>: <span class="string">&#x27;Todo #&#x27;</span> + nextId &#125;]</span><br><span class="line">    <span class="title function_">emitChange</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">listener</span>) &#123;</span><br><span class="line">    listeners = [...listeners, listener]</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      listeners = listeners.<span class="title function_">filter</span>(<span class="function">(<span class="params">l</span>) =&gt;</span> l !== listener)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getSnapshot</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> todos</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emitChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> listener <span class="keyword">of</span> listeners) &#123;</span><br><span class="line">    <span class="title function_">listener</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSyncExternalStore &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; todosStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./todoStore.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TodosApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> todos = <span class="title function_">useSyncExternalStore</span>(</span><br><span class="line">    todosStore.<span class="property">subscribe</span>,</span><br><span class="line">    todosStore.<span class="property">getSnapshot</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> todosStore.addTodo()&#125;&gt;Add todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;todos.map((todo) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="支持能力"><a href="#支持能力" class="headerlink" title="支持能力"></a>支持能力</h3><ul><li>异步请求</li><li>组件外订阅更新</li><li>框架无关</li><li>Immer 支持</li><li>持久化</li><li>Reducer</li><li>devtools</li></ul><h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useBearStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">bears</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">increasePopulation</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">bears</span>: state.<span class="property">bears</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">  <span class="attr">removeAllBears</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">bears</span>: <span class="number">0</span> &#125;),</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BearCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bears = <span class="title function_">useBearStore</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">bears</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;bears&#125; around here ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">&#x27;zustand&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useBearStore = <span class="title function_">create</span>(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">bears</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">increasePopulation</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123; <span class="attr">bears</span>: state.<span class="property">bears</span> + <span class="number">1</span> &#125;)),</span><br><span class="line">  <span class="attr">removeAllBears</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">bears</span>: <span class="number">0</span> &#125;),</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BearCounter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">unSub</span> = useBearStore.<span class="title function_">subscribe</span>(<span class="variable language_">this</span>.<span class="property">handleSubscribe</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">unSub</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleSubscribe = <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">bears</span>: store.<span class="property">bears</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; bears &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;bears&#125; around here ...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="创建-store"><a href="#创建-store" class="headerlink" title="创建 store"></a>创建 store</h3><p>利用闭包构建一个 store ，通过发布订阅的方式实现更新的监听</p><p><img src="/images/zustand_store.png" alt="工作流程"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">createStoreImpl</span>: <span class="title class_">CreateStoreImpl</span> = <span class="function">(<span class="params">createState</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">TState</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> createState&gt;</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Listener</span> = <span class="function">(<span class="params"><span class="attr">state</span>: <span class="title class_">TState</span>, <span class="attr">prevState</span>: <span class="title class_">TState</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="comment">// 闭包记录 state</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">state</span>: <span class="title class_">TState</span></span><br><span class="line">  <span class="comment">// 记录订阅的数组</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">listeners</span>: <span class="title class_">Set</span>&lt;<span class="title class_">Listener</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">  <span class="comment">// 更新 state ，触发事件监听，state 支持函数更新</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">setState</span>: <span class="title class_">StoreApi</span>&lt;<span class="title class_">TState</span>&gt;[<span class="string">&#x27;setState&#x27;</span>] = <span class="function">(<span class="params">partial, replace</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nextState =</span><br><span class="line">      <span class="keyword">typeof</span> partial === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">        ? (partial <span class="title function_">as</span> (<span class="attr">state</span>: <span class="title class_">TState</span>) =&gt; <span class="title class_">TState</span>)(state)</span><br><span class="line">        : partial</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Object</span>.<span class="title function_">is</span>(nextState, state)) &#123;</span><br><span class="line">      <span class="keyword">const</span> previousState = state</span><br><span class="line">      state =</span><br><span class="line">        replace ?? (<span class="keyword">typeof</span> nextState !== <span class="string">&#x27;object&#x27;</span> || nextState === <span class="literal">null</span>)</span><br><span class="line">          ? (nextState <span class="keyword">as</span> <span class="title class_">TState</span>)</span><br><span class="line">          : <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, state, nextState)</span><br><span class="line">      listeners.<span class="title function_">forEach</span>(<span class="function">(<span class="params">listener</span>) =&gt;</span> <span class="title function_">listener</span>(state, previousState))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 state 状态</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">getState</span>: <span class="title class_">StoreApi</span>&lt;<span class="title class_">TState</span>&gt;[<span class="string">&#x27;getState&#x27;</span>] = <span class="function">() =&gt;</span> state</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取初始化状态</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">getInitialState</span>: <span class="title class_">StoreApi</span>&lt;<span class="title class_">TState</span>&gt;[<span class="string">&#x27;getInitialState&#x27;</span>] = <span class="function">() =&gt;</span></span><br><span class="line">    initialState</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅状态更新，返回移除事件监听</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">subscribe</span>: <span class="title class_">StoreApi</span>&lt;<span class="title class_">TState</span>&gt;[<span class="string">&#x27;subscribe&#x27;</span>] = <span class="function">(<span class="params">listener</span>) =&gt;</span> &#123;</span><br><span class="line">    listeners.<span class="title function_">add</span>(listener)</span><br><span class="line">    <span class="comment">// Unsubscribe</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> listeners.<span class="title function_">delete</span>(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> api = &#123; setState, getState, getInitialState, subscribe &#125;</span><br><span class="line">  <span class="comment">// 初始化 state</span></span><br><span class="line">  <span class="keyword">const</span> initialState = (state = <span class="title function_">createState</span>(setState, getState, api))</span><br><span class="line">  <span class="keyword">return</span> api <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-订阅更新"><a href="#React-订阅更新" class="headerlink" title="React 订阅更新"></a>React 订阅更新</h3><p>利用 useSyncExternalStore 订阅更新</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useStore&lt;<span class="title class_">TState</span>, <span class="title class_">StateSlice</span>&gt;(</span><br><span class="line">  <span class="attr">api</span>: <span class="title class_">ReadonlyStoreApi</span>&lt;<span class="title class_">TState</span>&gt;,</span><br><span class="line">  <span class="attr">selector</span>: <span class="function">(<span class="params"><span class="attr">state</span>: <span class="title class_">TState</span></span>) =&gt;</span> <span class="title class_">StateSlice</span> = identity <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 订阅更新，通过 selector 获取对应的数据</span></span><br><span class="line">  <span class="keyword">const</span> slice = <span class="title class_">React</span>.<span class="title function_">useSyncExternalStore</span>(</span><br><span class="line">    api.<span class="property">subscribe</span>,</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">selector</span>(api.<span class="title function_">getState</span>()),</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">selector</span>(api.<span class="title function_">getInitialState</span>())</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// debug 时使用，输出 store 数据</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useDebugValue</span>(slice)</span><br><span class="line">  <span class="keyword">return</span> slice</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>通过高阶函数的方式实现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reduxImpl</span> = (<span class="params">reducer, initial</span>) =&gt; <span class="function">(<span class="params">set, _get, api</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 实现 dispatch</span></span><br><span class="line">  api.<span class="property">dispatch</span> = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> <span class="title function_">reducer</span>(state, action), <span class="literal">false</span>, action)</span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 标识来源，目前主要用于 devtools 中</span></span><br><span class="line">  api.<span class="property">dispatchFromDevtools</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">dispatch</span>: <span class="function">(<span class="params">...a</span>) =&gt;</span> api.<span class="title function_">dispatch</span>(...a), ...initial &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/7274163003157790720">https://juejin.cn/post/7274163003157790720</a></li><li><a href="https://github.com/pmndrs/zustand/tree/main">https://github.com/pmndrs/zustand/tree/main</a></li><li><a href="https://zh-hans.react.dev/reference/react/useSyncExternalStore#">https://zh-hans.react.dev/reference/react/useSyncExternalStore#</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个精简、高效且可扩展的状态管理方案，它巧妙地运用了简化的 Flux 原则。该方案提供了一套基于 Hooks 的直观 API，既简洁易用，又避免了冗余代码和强制性的框架偏好，让开发者能够更专注于业务逻辑的实现。&lt;/p&gt;
&lt;h2 id=&quot;Flux-原则&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>typescript自定义实现</title>
    <link href="http://example.com/2024/09/22/typescript%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2024/09/22/typescript%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-09-21T23:43:17.000Z</published>
    <updated>2024-09-21T15:49:46.200Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>TypeScript 是微软开发推出的语言，是 JavaScript 的超集，补充了静态类型检查等功能<br>大多数情况下，TypeScript 需要编译为 JavaScript 再运行</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>用 import 和 export 来导入和创建模块</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>用 namespace 将具有相似功能或属性的类、接口等进行分组，避免命名冲突的方式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.ts</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;test.ts&quot; /&gt;</span></span><br><span class="line"><span class="title class_">Test</span>.<span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><h3 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h3><p>运行时的类型断言</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">test</span>: <span class="built_in">any</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> test === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// string 类型时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>接口定义，可以用来定义接口、函数和数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fun</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Arr</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器是一种特殊类型的声明，可以附加到类、方法、访问符、属性或参数上，以修改其行为。在 TypeScript 中，装饰器提供了一种在声明时定义如何处理类的方法、属性或参数的机制。</p><ul><li>类装饰器</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> classDecorater&lt;T <span class="keyword">extends</span> &#123; <span class="title function_">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>): &#123;&#125; &#125;&gt;(<span class="attr">constructor</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> constructor &#123;</span><br><span class="line">    <span class="keyword">public</span> test = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@classDecorater</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> aaa = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法或属性装饰器</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">propDecorater</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="attr">obj</span>: <span class="built_in">any</span>, <span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">config</span>: <span class="title class_">PropertyDescriptor</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 装饰器逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj&#x27;</span>, obj, <span class="string">&#x27;key&#x27;</span>, key, <span class="string">&#x27;config&#x27;</span>, config)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="meta">@propDecorater</span>()</span><br><span class="line">  <span class="attr">aaa</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置类型实现"><a href="#内置类型实现" class="headerlink" title="内置类型实现"></a>内置类型实现</h2><ul><li>Exclude</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyExclude</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure><ul><li>Include</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyInclude</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? T : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><ul><li>Omit</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyOmit</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>, K&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>Partial</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyPartial</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; = &#123; [K <span class="keyword">in</span> keyof T]?: T[K] &#125;</span><br></pre></td></tr></table></figure><ul><li>Pick</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>, K&gt; = &#123;</span><br><span class="line">  [M <span class="keyword">in</span> <span class="title class_">MyInclude</span>&lt;keyof T, K&gt;]: T[M]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Required</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyRequired</span>&lt;T&gt; = &#123; [K <span class="keyword">in</span> keyof T]-?: T[K] &#125;</span><br></pre></td></tr></table></figure><ul><li>Parameters</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyParameters</span>&lt;T <span class="title function_">extends</span> (<span class="attr">arg</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="title function_">extends</span> (<span class="attr">arg</span>: infer K) =&gt; <span class="built_in">any</span></span><br><span class="line">  ? K</span><br><span class="line">  : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><ul><li>ConstructorParameters</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span>(<span class="attr">arg</span>: <span class="built_in">any</span>): <span class="built_in">any</span> &gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="title function_">new</span>(<span class="attr">arg</span>: infer K): <span class="built_in">any</span> ? K : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><ul><li>ReturnType</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReturnType</span>&lt;T <span class="title function_">extends</span> (<span class="attr">arg</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="title function_">extends</span> (<span class="attr">arg</span>: <span class="built_in">any</span>) =&gt; infer K</span><br><span class="line">  ? K</span><br><span class="line">  : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li>提取对象中的值类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getPropType&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>非空校验</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NotNull</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T</span><br></pre></td></tr></table></figure><ul><li>模版字符串</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> call&lt;T <span class="keyword">extends</span> <span class="string">`aaa_<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span>`</span>&gt;(<span class="attr">a</span>: T) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;aa&#x27;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">call</span>(<span class="string">&#x27;xxx&#x27;</span>) <span class="comment">// Argument of type &#x27;&quot;xxx&quot;&#x27; is not assignable to parameter of type &#x27;`aaa_$&#123;string&#125;`&#x27;.</span></span><br></pre></td></tr></table></figure><ul><li>Infer</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> test&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = <span class="string">`<span class="subst">$&#123;T&#125;</span>`</span> <span class="keyword">extends</span> <span class="string">`-<span class="subst">$&#123;infer M&#125;</span>`</span> ? <span class="built_in">never</span> : T</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> testCall&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>&gt;(<span class="attr">a</span>: test&lt;T&gt;) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;testCall&#x27;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testCall</span>(-<span class="number">1</span>) <span class="comment">// Argument of type &#x27;number&#x27; is not assignable to parameter of type &#x27;never&#x27;.</span></span><br></pre></td></tr></table></figure><p>参考</p><ul><li><a href="https://juejin.cn/post/7321542773076082699">https://juejin.cn/post/7321542773076082699</a></li><li><a href="https://www.typescriptlang.org/play/">https://www.typescriptlang.org/play/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;TypeScript 是微软开发推出的语言，是 JavaScript 的超集，补充了静态类型检查等功能&lt;br&gt;大多数情况下，TypeScri</summary>
      
    
    
    
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>业务-大牌试用</title>
    <link href="http://example.com/2024/09/21/%E4%B8%9A%E5%8A%A1-%E5%A4%A7%E7%89%8C%E8%AF%95%E7%94%A8/"/>
    <id>http://example.com/2024/09/21/%E4%B8%9A%E5%8A%A1-%E5%A4%A7%E7%89%8C%E8%AF%95%E7%94%A8/</id>
    <published>2024-09-20T21:43:43.000Z</published>
    <updated>2024-09-20T14:04:37.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="商品"><a href="#商品" class="headerlink" title="商品"></a>商品</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><img src="/images/product_life.png" alt="商品生命周期"></p><h3 id="小样"><a href="#小样" class="headerlink" title="小样"></a>小样</h3><p><img src="/images/product_trial.png" alt="小样商品"></p><h2 id="频道定位"><a href="#频道定位" class="headerlink" title="频道定位"></a>频道定位</h2><p>试用频道是一个商城内派样的主阵地，通过派发小样商品引导商家投入更多资源，促进正装商品的销售</p><h2 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>能够在频道内买到正品好价的大牌小样商品</p><h3 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h3><ul><li>更多的新客</li><li>更多的订单</li><li>更多的复访复购</li></ul><h3 id="商家"><a href="#商家" class="headerlink" title="商家"></a>商家</h3><ul><li>在平台上增加更多的派样订单</li><li>通过派样商品带来更多的会员，沉淀更多的私域用户</li><li>通过派样撬动更多的复访复购</li></ul><h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h3><ul><li>派样量（订单量）</li><li>入会用户数</li><li>复购规模（复购 GMV）</li></ul><h2 id="频道内容"><a href="#频道内容" class="headerlink" title="频道内容"></a>频道内容</h2><h3 id="商品-1"><a href="#商品-1" class="headerlink" title="商品"></a>商品</h3><h4 id="会员商品"><a href="#会员商品" class="headerlink" title="会员商品"></a>会员商品</h4><p>通过购买试用装引导用户入会，为商家带来更多的私域流量，后续通过发送会员券的方式来引导用户购买正装，促进用户的转化和复访复购</p><h4 id="无门槛商品"><a href="#无门槛商品" class="headerlink" title="无门槛商品"></a>无门槛商品</h4><ul><li>通过无门槛派样来建立品牌或商品在用户心里的口碑，促进正装商品的销售和用户的复访复购</li><li>通过控制各个环节的成本，把商品拆分成小样的方式进行销售以达到获利目的</li></ul><h3 id="流量来源"><a href="#流量来源" class="headerlink" title="流量来源"></a>流量来源</h3><ul><li>商城工具区等固定入口的流量</li><li>提单页、支付成功页、物流详情页等渠道的引流流量</li><li>抖音内的视频广告流等渠道的投流流量</li></ul><h3 id="商品来源"><a href="#商品来源" class="headerlink" title="商品来源"></a>商品来源</h3><ul><li>通过平台圈选的商品，频道商品的主要来源，但商品的质量和价格优势不明显</li><li>通过招商平台招商的商品，竞争力比较好，价格和质量都有保证</li></ul><h3 id="平台玩法"><a href="#平台玩法" class="headerlink" title="平台玩法"></a>平台玩法</h3><ul><li>普通的商品 feed 流</li><li>优质招商商品组成的限量购玩法</li><li>分人群发券引导用户购买试用装，通过发券的方式来提高商品的价格力和用户的转化</li><li>正在规划建设中的 N 元 M 件玩法，通过让商家把商品入库，试用频道组合出库的方式提高派样量，降低派样成本</li><li>大品牌新品上新活动</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;商品&quot;&gt;&lt;a href=&quot;#商品&quot; class=&quot;headerlink&quot; title=&quot;商品&quot;&gt;&lt;/a&gt;商品&lt;/h2&gt;&lt;h3 id=&quot;生命周期&quot;&gt;&lt;a href=&quot;#生命周期&quot; class=&quot;headerlink&quot; title=&quot;生命周期&quot;&gt;&lt;/a&gt;生命周期&lt;/h</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>hexo升级</title>
    <link href="http://example.com/2024/09/20/hexo%E5%8D%87%E7%BA%A7/"/>
    <id>http://example.com/2024/09/20/hexo%E5%8D%87%E7%BA%A7/</id>
    <published>2024-09-19T21:10:11.000Z</published>
    <updated>2024-09-19T13:20:23.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h2><ul><li><a href="https://hexo.io/zh-cn/docs/">检查 <code>hexo</code> 目标版本的 <code>node</code> 版本依赖</a></li><li>检查 <code>node</code> 版本是否符合要求<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node  -v</span><br></pre></td></tr></table></figure></li><li><a href="https://nodejs.org/zh-cn/download/package-manager">升级 <code>node</code> 版本</a></li></ul><h2 id="hexo-升级"><a href="#hexo-升级" class="headerlink" title="hexo 升级"></a>hexo 升级</h2><p>以 <code>yarn</code> 为例</p><ol><li>检查 hexo 版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo -v</span><br></pre></td></tr></table></figure><ol start="2"><li>执行升级命令更新到最新版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade --latest</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://classic.yarnpkg.cn/docs/cli/upgrade/">yarn upgrade</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;检查版本&quot;&gt;&lt;a href=&quot;#检查版本&quot; class=&quot;headerlink&quot; title=&quot;检查版本&quot;&gt;&lt;/a&gt;检查版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;检查 &lt;code&gt;hexo&lt;/cod</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>复盘</title>
    <link href="http://example.com/2024/07/08/%E5%A4%8D%E7%9B%98/"/>
    <id>http://example.com/2024/07/08/%E5%A4%8D%E7%9B%98/</id>
    <published>2024-07-07T23:05:23.000Z</published>
    <updated>2024-07-07T15:09:09.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://weread.qq.com/book-detail?type=1&senderVid=4957722&v=7cf32340724c43627cf2a01">复盘</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://weread.qq.com/book-detail?type=1&amp;senderVid=4957</summary>
      
    
    
    
    
    <category term="读书" scheme="http://example.com/tags/read-book/"/>
    
  </entry>
  
  <entry>
    <title>菜单设计</title>
    <link href="http://example.com/2024/03/17/%E8%8F%9C%E5%8D%95%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2024/03/17/%E8%8F%9C%E5%8D%95%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-03-16T23:32:33.000Z</published>
    <updated>2024-03-17T13:11:39.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>站点菜单存在需要修改的情况，每次修改之后都需要发布应用代码，严重影响了开发迭代的效率</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>整体站点是一个经典的<code>顶部-侧边栏</code>，实现一个菜单配置的功能，需要具有如下能力</p><ul><li>用户能够自主申请接入</li><li>需要管理员进行审批才能生效</li><li>生效前只能管理员和菜单所有者才能看到对应配置</li><li>能够支持多级菜单</li><li>能够支持菜单的自由排序</li><li>菜单匹配需要支持精确匹配、前缀匹配和自定义匹配的方式</li></ul><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p><img src="/images/menu_design.png" alt="整体流程"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h3><ul><li>菜单数据量少</li><li>存在半结构化的数据类型（<code>owners</code> 可能支持多选和搜索）</li><li>无复杂查询场景</li><li>并发量不高</li></ul><h3 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Menu` (</span><br><span class="line">  `_id` number <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单 id，默认生成的唯一 id&#x27;</span>,</span><br><span class="line">  `<span class="keyword">order</span>` number <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单顺序&#x27;</span>,</span><br><span class="line">  `pid` string <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父菜单 id，一级菜单的父 id 为 root&#x27;</span>,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  `path` <span class="type">char</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单路由&#x27;</span>,</span><br><span class="line">  `matchPrefix` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否前缀匹配&#x27;</span>,</span><br><span class="line">  `hiddenLeftMenu` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否隐藏左侧导航栏&#x27;</span>,</span><br><span class="line">  `owners` string[] <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单所有者&#x27;</span>,</span><br><span class="line">  `status` tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;状态 1: 待上线  10: 已上线&#x27;</span>,</span><br><span class="line">  `createTime` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;添加时间&#x27;</span>,</span><br><span class="line">  `updateTime` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单管理&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>order</code>： 一级菜单 100-999，二级菜单为一级菜单顺序 * 1000 + （1-1000）的范围</li><li><code>matchPrefix</code>： 是否前缀匹配，为了支持动态路由和其路径下的菜单匹配</li><li><code>hiddenLeftMenu</code>： 是否隐藏左侧导航栏，部分场景无需左侧的菜单</li></ul><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><ul><li>菜单查询（分权限展示，未上线的菜单需要在菜单所有者和管理员的场景下能够展示出来）</li><li>菜单新增</li><li>菜单修改</li><li>菜单上线（管理员）</li><li>菜单删除（管理员）</li><li>菜单排序</li></ul><h2 id="前端界面设计"><a href="#前端界面设计" class="headerlink" title="前端界面设计"></a>前端界面设计</h2><p>需要支持以下功能</p><ul><li>支持菜单的叶子节点和非叶子节点</li><li>支持排序</li></ul><p>采用 <code>antd</code> 的 <a href="https://ant-design.antgroup.com/components/tree-cn?from=msidevs.net"><code>tree</code></a> 进行菜单的编辑功能</p><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>菜单设计时需要考虑以下情况</p><ul><li>菜单设计时需要考虑排序</li><li>权限设计</li><li>路由匹配</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;站点菜单存在需要修改的情况，每次修改之后都需要发布应用代码，严重影响了开发迭代的效率&lt;/p&gt;
&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目</summary>
      
    
    
    
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>js打印分页</title>
    <link href="http://example.com/2023/10/15/js%E6%89%93%E5%8D%B0%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2023/10/15/js%E6%89%93%E5%8D%B0%E5%88%86%E9%A1%B5/</id>
    <published>2023-10-14T18:14:38.000Z</published>
    <updated>2023-10-14T11:00:30.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>调用 <code>window.print()</code> 进行页面打印</p><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p><code>page-break-after</code> CSS 属性调整当前元素之后的分页符。</p><ul><li>auto:初始值。自动分页符（既不强制也不禁止）。</li><li>always: 始终在元素后强制分页。</li><li>avoid: 避免在元素后出现分页符。</li><li>left: 在元素之后足够的分页符，一直到一张空白的左页为止。</li><li>right: 在元素之后足够的分页符，一直到一张空白的右页为止。</li></ul><p><code>page-break-before</code> CSS 属性调整当前元素之后的分页符。</p><ul><li>auto:初始值。自动分页符（既不强制也不禁止）。</li><li>avoid: 避免在元素前出现分页符。</li></ul><p><code>page-break-inside</code> CSS 属性调整当前元素之后的分页符。</p><ul><li>auto:初始值。自动分页符（既不强制也不禁止）。</li><li>avoid: 避免在元素中出现分页符。</li></ul><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>若遇到在某些浏览器设置 <code>page-break-after:always;</code> 无法生效时，可以参考以下配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: block;position: relative;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;page-break-after:always;page-break-inside: avoid;-webkit-region-break-inside: avoid;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    第一页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;page-break-after:always;page-break-inside: avoid;-webkit-region-break-inside: avoid;&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    第二页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/print">print() 方法</a></li><li><a href="https://stackoverflow.com/questions/1630819/google-chrome-printing-page-breaks">page-break-after: always; 不生效</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/page-break-after">page-break-after</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;打印&quot;&gt;&lt;a href=&quot;#打印&quot; class=&quot;headerlink&quot; title=&quot;打印&quot;&gt;&lt;/a&gt;打印&lt;/h2&gt;&lt;p&gt;调用 &lt;code&gt;window.print()&lt;/code&gt; 进行页面打印&lt;/p&gt;
&lt;h3 id=&quot;分页&quot;&gt;&lt;a href=&quot;#分页&quot; cl</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>高德地图</title>
    <link href="http://example.com/2022/11/28/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>http://example.com/2022/11/28/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/</id>
    <published>2022-11-27T19:55:24.000Z</published>
    <updated>2022-11-27T12:13:47.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>注册账号并申请 Key ，参考 <a href="https://lbs.amap.com/api/jsapi-v2/guide/abc/prepare">官方链接</a></li><li>通过 <code>npm i @amap/amap-jsapi-loader</code> 安装 <code>SDK</code></li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>配置 <code>securityJsCode</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">_AMapSecurityConfig</span> = &#123;</span><br><span class="line">  <span class="attr">securityJsCode</span>: <span class="string">&#x27;你的 secret&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>初始化 <code>SDK</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AMapLoader</span> <span class="keyword">from</span> <span class="string">&#x27;@amap/amap-jsapi-loader&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">AMapLoader</span>.<span class="title function_">load</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;你的 key&#x27;</span>, <span class="comment">// 申请好的Web端开发者Key，首次调用 load 时必填</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;2.0&#x27;</span>, <span class="comment">// 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15</span></span><br><span class="line">  <span class="attr">plugins</span>: [], <span class="comment">// 需要使用的的插件列表，如比例尺&#x27;AMap.Scale&#x27;等</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="title class_">AMap</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>通过此种方式使用高德地图时，建议 <code>securityJsCode</code> 在使用前做简单的加密，如通过 <code>base64</code> 等方式加密等</li><li>当出现较大的误差时请检查 <code>key</code> 和 <code>securityJsCode</code> 是否匹配</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://lbs.amap.com/api/jsapi-v2/summary">高德地图</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;注册账号并申请 Key ，参考 &lt;a href=&quot;https://lbs.amap.com/api/jsapi-v2/guide</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>pixi.js</title>
    <link href="http://example.com/2022/11/28/pixi-js/"/>
    <id>http://example.com/2022/11/28/pixi-js/</id>
    <published>2022-11-27T19:20:55.000Z</published>
    <updated>2022-11-27T11:53:59.877Z</updated>
    
    <content type="html"><![CDATA[<p>Pixi 是一个非常快的 2D sprite 渲染引擎。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>速度快：在 2D 渲染方面，PixiJS 是最快的。</li><li>灵活：友好的、功能丰富的 API 让 PixiJS 轻松处理基本问题，同时您可以专注于生成令人难以置信跨平台体验。</li><li>免费： PixiJS 永久开源，并拥有庞大的支持社区推动它的发展和演变。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过 <code>npm</code> 安装最新的 6.5.8 版本，7.x 版本暂时还有一些问题，建议使用 6.x 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pixi.js@6.5.8</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>创建应用，并把应用挂载到 dom 中</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="variable constant_">PIXI</span>, &#123; <span class="title class_">Application</span>, <span class="title class_">Sprite</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pixi.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Application</span>(&#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="comment">// default: false 反锯齿</span></span><br><span class="line">  <span class="attr">resolution</span>: <span class="number">1</span>, <span class="comment">// default: 1 分辨率</span></span><br><span class="line">&#125;)</span><br><span class="line">root.<span class="title function_">appendChild</span>(app.<span class="property">view</span> <span class="keyword">as</span> <span class="built_in">any</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>加载资源并把资源放在画布的中间</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="property">loader</span>.<span class="title function_">add</span>(<span class="string">&#x27;bunny&#x27;</span>, logo).<span class="title function_">load</span>(<span class="function">(<span class="params">loader, resources</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// This creates a texture from a &#x27;bunny.png&#x27; image.</span></span><br><span class="line">  <span class="keyword">const</span> bunny = <span class="keyword">new</span> <span class="title class_">Sprite</span>(resources.<span class="property">bunny</span>.<span class="property">texture</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Setup the position of the bunny</span></span><br><span class="line">  bunny.<span class="property">x</span> = app.<span class="property">renderer</span>.<span class="property">width</span> / <span class="number">2</span></span><br><span class="line">  bunny.<span class="property">y</span> = app.<span class="property">renderer</span>.<span class="property">height</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Rotate around the center</span></span><br><span class="line">  bunny.<span class="property">anchor</span>.<span class="property">x</span> = <span class="number">0.5</span></span><br><span class="line">  bunny.<span class="property">anchor</span>.<span class="property">y</span> = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the bunny to the scene we are building.</span></span><br><span class="line">  app.<span class="property">stage</span>.<span class="title function_">addChild</span>(bunny)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>让图片运动起来</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Listen for frame updates</span></span><br><span class="line">app.<span class="property">ticker</span>.<span class="title function_">add</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// each frame we spin the bunny around a bit</span></span><br><span class="line">  <span class="comment">// console.log(&#x27;bunny.anchor.x&#x27;, bunny.anchor)</span></span><br><span class="line">  <span class="keyword">if</span> (bunny.<span class="property">x</span> &gt;= app.<span class="property">renderer</span>.<span class="property">width</span>) &#123;</span><br><span class="line">    bunny.<span class="property">x</span> = <span class="number">0</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bunny.<span class="property">x</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="示例图片"><a href="#示例图片" class="headerlink" title="示例图片"></a>示例图片</h3><p><img src="/images/2d/demo.jpg" alt="示例图片"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://pixijs.huashengweilai.com/"> Pixi.js 中文网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Pixi 是一个非常快的 2D sprite 渲染引擎。&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;速度快：在 2D 渲染方面，PixiJS 是最快的。&lt;/</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js获取方位信息</title>
    <link href="http://example.com/2022/08/21/js%E8%8E%B7%E5%8F%96%E6%96%B9%E4%BD%8D%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2022/08/21/js%E8%8E%B7%E5%8F%96%E6%96%B9%E4%BD%8D%E4%BF%A1%E6%81%AF/</id>
    <published>2022-08-20T22:56:47.000Z</published>
    <updated>2022-08-20T15:22:52.841Z</updated>
    
    <content type="html"><![CDATA[<p>js 提供了获取方位信息的方法，整体可以分为以下几步</p><h3 id="前置检查"><a href="#前置检查" class="headerlink" title="前置检查"></a>前置检查</h3><p>通过判断 <code>window</code> 是否具有 <code>DeviceOrientationEvent</code> 这个属性来判断是否支持获取方位信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkOrientation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Boolean</span>(<span class="variable language_">window</span>.<span class="property">DeviceOrientationEvent</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取方位信息"><a href="#获取方位信息" class="headerlink" title="获取方位信息"></a>获取方位信息</h3><p>通过监听事件实现对方位信息的获取</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">watchOrientation</span>(<span class="params"><span class="attr">callback</span>: (e: DeviceOrientationEvent) =&gt; <span class="built_in">void</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">checkOrientation</span>()) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;deviceorientation&#x27;</span>, callback, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;deviceorientation&#x27;</span>, callback, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> loop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a><code>callback</code></h5><p>获取方位信息后的回调，类型为 <code>(e: DeviceOrientationEvent) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">DeviceOrientationEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">absolute</span>: <span class="built_in">boolean</span> <span class="comment">// 一个布尔值，指示设备是否绝对提供方向数据。</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">alpha</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕z轴运动的数字，以度表示，值范围为0（包括）到360（不包括）。以正北方向为 0 度</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">beta</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕x轴运动的数字，以度表示，值范围为-180（包括）到180（不包括）。这表示设备的前后运动。</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">gamma</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 表示设备绕y轴运动的数字，以度表示，值范围为-90（包括）到90（不包括）。这表示设备从左到右的运动。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>需要当前页面为 <code>HTTPS</code> 才被允许获取方位信息</li><li>可以通过<a href="https://sensorbox.glitch.me/">当前页面</a>检测设备是否支持获取方位信息</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition">Geolocation 获取位置</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;js 提供了获取方位信息的方法，整体可以分为以下几步&lt;/p&gt;
&lt;h3 id=&quot;前置检查&quot;&gt;&lt;a href=&quot;#前置检查&quot; class=&quot;headerlink&quot; title=&quot;前置检查&quot;&gt;&lt;/a&gt;前置检查&lt;/h3&gt;&lt;p&gt;通过判断 &lt;code&gt;window&lt;/code&gt; 是否具</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js获取位置信息</title>
    <link href="http://example.com/2022/08/20/js%E8%8E%B7%E5%8F%96%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2022/08/20/js%E8%8E%B7%E5%8F%96%E4%BD%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</id>
    <published>2022-08-19T22:36:09.000Z</published>
    <updated>2022-08-19T15:35:05.008Z</updated>
    
    <content type="html"><![CDATA[<p>项目中需要获取定位信息，js 提供了对于的接口去获取，整体可以分为以下几步</p><h3 id="前置检查"><a href="#前置检查" class="headerlink" title="前置检查"></a>前置检查</h3><p>通过判断 <code>navigator</code> 是否具有 <code>geolocation</code> 这个属性来判断是否支持获取定位信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkGeolocation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;geolocation&#x27;</span> <span class="keyword">in</span> navigator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h3><p>通过接口获取当前浏览器的定位授权状态</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">checkPermission</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> navigator?.<span class="property">permissions</span>?.<span class="title function_">query</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;geolocation&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">return</span> res?.<span class="property">state</span> || <span class="string">&#x27;prompt&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>授权状态共有 <code>denied</code>、<code>granted</code>、<code>prompt</code> 三种状态</p><ul><li><code>denied</code>：拒绝授权</li><li><code>granted</code>： 已经授权</li><li><code>prompt</code>：需要用户手动授权</li></ul><h3 id="获取位置"><a href="#获取位置" class="headerlink" title="获取位置"></a>获取位置</h3><h4 id="一次获取位置"><a href="#一次获取位置" class="headerlink" title="一次获取位置"></a>一次获取位置</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(callback, handleError, options)</span><br></pre></td></tr></table></figure><h4 id="监听位置变化"><a href="#监听位置变化" class="headerlink" title="监听位置变化"></a>监听位置变化</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册事件监听</span></span><br><span class="line"><span class="keyword">const</span> geoWatchID = navigator.<span class="property">geolocation</span>.<span class="title function_">watchPosition</span>(</span><br><span class="line">  callback,</span><br><span class="line">  handleError,</span><br><span class="line">  options</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清楚监听事件</span></span><br><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">clearWatch</span>(geoWatchID)</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="callback"><a href="#callback" class="headerlink" title="callback"></a><code>callback</code></h5><p>获取位置信息后的回调，类型为 <code>(position: GeolocationPosition) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GeolocationCoordinates</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">accuracy</span>: <span class="built_in">number</span> <span class="comment">// 表示纬度和经度属性精度的双精度值，以米为单位</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">altitude</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 海拔高度</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">altitudeAccuracy</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 一个双精度值，表示以米为单位的高度精度。此值可以为空。</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">heading</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 返回表示设备运行方向的双精度值。该值以度为单位，表示设备偏离正北方航向的距离。0度表示正北方，方向为顺时针方向（即东90度，西270度）。如果速度为0，航向为NaN。如果设备无法提供航向信息，则该值为空。</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">latitude</span>: <span class="built_in">number</span> <span class="comment">// 维度</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">longitude</span>: <span class="built_in">number</span> <span class="comment">// 经度</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">speed</span>: <span class="built_in">number</span> | <span class="literal">null</span> <span class="comment">// 返回表示设备速度的双精度值，单位为米/秒。此值可以为空。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Available only in secure contexts. */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GeolocationPosition</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">coords</span>: <span class="title class_">GeolocationCoordinates</span> <span class="comment">// 表示设备在地球上的位置和海拔，以及计算这些属性的精确度</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">timestamp</span>: <span class="title class_">EpochTimeStamp</span> <span class="comment">// 表示获取到的位置的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="handleError"><a href="#handleError" class="headerlink" title="handleError"></a><code>handleError</code></h5><p>获取位置信息失败的回调，类型为 <code>(error: GeolocationPositionError) =&gt; void</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GeolocationPositionError</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 错误原因</span></span><br><span class="line"><span class="comment">   * 1 -&gt; PERMISSION_DENIED: 地理位置信息的获取失败，因为该页面没有获取地理位置信息的权限。</span></span><br><span class="line"><span class="comment">   * 2 -&gt; POSITION_UNAVAILABLE:地理位置获取失败，因为至少有一个内部位置源返回一个内部错误。</span></span><br><span class="line"><span class="comment">   * 3 -&gt; TIMEOUT: 获取地理位置超时，通过定义PositionOptions.timeout 来设置获取地理位置的超时时长。</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">message</span>: <span class="built_in">string</span> <span class="comment">// 描述错误的详细信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="options"><a href="#options" class="headerlink" title="options"></a><code>options</code></h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PositionOptions</span> &#123;</span><br><span class="line">  enableHighAccuracy?: <span class="built_in">boolean</span> <span class="comment">// 表示应用程序希望接收最佳可能结果。如果为真，并且如果设备能够提供更准确的位置，它将这样做。请注意，这可能导致响应时间变慢或功耗增加（例如，使用移动设备上的GPS芯片）。另一方面，如果为假，则设备可以通过更快地响应和/或使用更少的功率来自由节省资源。默认值：false。</span></span><br><span class="line">  maximumAge?: <span class="built_in">number</span> <span class="comment">// 可接受返回的可能缓存位置的最大时间（以毫秒为单位）。如果设置为0，则表示设备无法使用缓存位置，必须尝试检索实际当前位置。如果设置为无穷大，则设备必须返回缓存位置，而不管其使用年限如何。默认值：0。</span></span><br><span class="line">  timeout?: <span class="built_in">number</span> <span class="comment">// 表示设备返回位置所允许的最大时间长度（以毫秒为单位）。默认值为无穷大，这意味着getCurrentPosition（）在位置可用之前不会返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><code>iOS</code>或部分 <code>Android</code> 设备需要当前页面为 <code>HTTPS</code> 才被允许获取位置信息</li><li>可以通过<a href="https://sensorbox.glitch.me/">当前页面</a>检测设备是否支持获取位置信息</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/getCurrentPosition">Geolocation 获取位置</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目中需要获取定位信息，js 提供了对于的接口去获取，整体可以分为以下几步&lt;/p&gt;
&lt;h3 id=&quot;前置检查&quot;&gt;&lt;a href=&quot;#前置检查&quot; class=&quot;headerlink&quot; title=&quot;前置检查&quot;&gt;&lt;/a&gt;前置检查&lt;/h3&gt;&lt;p&gt;通过判断 &lt;code&gt;naviga</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>git merge和rebase</title>
    <link href="http://example.com/2022/05/29/merge%E5%92%8Crebase/"/>
    <id>http://example.com/2022/05/29/merge%E5%92%8Crebase/</id>
    <published>2022-05-28T21:55:56.000Z</published>
    <updated>2022-05-28T15:08:44.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都是用来合并分支，将不同分支的代码融合在一起</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><h4 id="生成的代码树不同"><a href="#生成的代码树不同" class="headerlink" title="生成的代码树不同"></a>生成的代码树不同</h4><ul><li><p>merge 生成的代码树记录了所有的历史操作过程<br><img src="/images/git/merge.png" alt="merge 生成的代码树"></p></li><li><p>rebase 生成的代码树是一条直线，通过对目标分支进行 “嫁接”，把新提交的 commit 代码添加到源分支的最后<br><img src="/images/git/rebase.png" alt="rebase 生成的代码树"></p></li></ul><h4 id="处理冲突的方式"><a href="#处理冲突的方式" class="headerlink" title="处理冲突的方式"></a>处理冲突的方式</h4><ul><li>merge 命令合并分支，只需解决一次冲突，但是会产生一个新的 commit</li><li>rebase 命令合并分支，解决完冲突，执行 git add .和 git rebase –continue，不会产生额外的 commit，但是需要重复处理多次冲突。</li></ul><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>当满足以下条件时：</p><ul><li>能够定期 rebase（避免 rebase 时出现大量冲突需要解决）</li><li>开发的分支只是自己使用（避免其他人拉去代码时本地产生冲突）</li><li>非基础公共分支</li></ul><p>使用 rebase，其它使用 merge</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase [<span class="built_in">source</span>] [target]</span><br><span class="line"><span class="comment"># source 分支作为基线，把 target 分支的 commit 嫁接到 source 分支上，若 target 分支参数不存在则使用当前所在分支</span></span><br></pre></td></tr></table></figure><h4 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h4><p>如果你不熟悉 git rebase，可以随时在临时分支中执行 rebase。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/57872388">Merge vs Rebase</a></li><li><a href="https://git-scm.com/docs/git-rebase/">git-rebase </a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;相同点&quot;&gt;&lt;a href=&quot;#相同点&quot; class=&quot;headerlink&quot; title=&quot;相同点&quot;&gt;&lt;/a&gt;相同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;都是用来合并分支，将不同分支的代码融合在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;不同点&quot;&gt;&lt;a href=&quot;#不同点</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>黑客增长</title>
    <link href="http://example.com/2022/05/09/%E9%BB%91%E5%AE%A2%E5%A2%9E%E9%95%BF/"/>
    <id>http://example.com/2022/05/09/%E9%BB%91%E5%AE%A2%E5%A2%9E%E9%95%BF/</id>
    <published>2022-05-08T22:30:27.000Z</published>
    <updated>2022-05-22T14:23:48.135Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>已极低甚至为零的成本，实现发展的跃迁</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="AARRR-漏斗模型"><a href="#AARRR-漏斗模型" class="headerlink" title="AARRR 漏斗模型"></a>AARRR 漏斗模型</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.sohu.com/a/487162563_121124370">一文了解增长黑客 </a></li><li><a href="https://zhuanlan.zhihu.com/p/480814512">《硅谷增长黑客实战笔记》学习笔记</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;p&gt;已极低甚至为零的成本，实现发展的跃迁&lt;/p&gt;
&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="other" scheme="http://example.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>js中浮点数精度问题</title>
    <link href="http://example.com/2022/01/17/js%E4%B8%AD%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/01/17/js%E4%B8%AD%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-16T17:46:51.000Z</published>
    <updated>2022-01-22T10:21:00.283Z</updated>
    
    <content type="html"><![CDATA[<p>在商品的价格计算中，由于精度的需要，要把用户输入的价格从元转化为分，其转化规则如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="title class_">Number</span>(inputPrice) * <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price)</span><br></pre></td></tr></table></figure><p>但是在测试过程中发现，输入 <code>2.01</code> 时，输出结果不为 <code>201</code> ，而是 <code>200.99999999999997</code><br>通过研究发现和 js 的数字存储方式 <code>IEEE 754</code> 有关，计算机存储数字时，由于存储方式的原因，存储的并不是准确的数字，而是有一定误差的数字，如经典的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="IEEE-754-浮点数"><a href="#IEEE-754-浮点数" class="headerlink" title="IEEE 754 浮点数"></a>IEEE 754 浮点数</h2><p><img src="/images/js/float-num.webp" alt="IEEE 754 浮点数表示"></p><p>IEEE 754 浮点数由三个域组成，分别为 sign bit (符号位)、exponent bias (指数偏移值) 和 fraction (尾数)。64 位中，sign bit 占 1 位，exponent bias 占 11 位，fraction 占 52 位。</p><h3 id="0-1-转换为二进制表示"><a href="#0-1-转换为二进制表示" class="headerlink" title="0.1 转换为二进制表示"></a>0.1 转换为二进制表示</h3><p>小数转二进制用乘 R 取整的方法，运算如下</p><table><thead><tr><th>小数</th><th>x2 的结果</th><th>整数部分</th></tr></thead><tbody><tr><td>0.1</td><td>0.2</td><td>0</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>0.4</td><td>0.8</td><td>0</td></tr><tr><td>0.8</td><td>1.6</td><td>1</td></tr><tr><td>0.6</td><td>1.2</td><td>1</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>0.4</td><td>0.8</td><td>0</td></tr><tr><td>0.8</td><td>1.6</td><td>1</td></tr><tr><td>0.6</td><td>1.2</td><td>1</td></tr><tr><td>0.2</td><td>0.4</td><td>0</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>结果 <code>0.00011001100110011…</code>(循环 <code>0011</code>), 将转换后的二进制通过科学计数法表示 <code>0.00011...</code>(无限重复 <code>0011</code>) 通过科学计数法表示则是 <code>1.10011001...(重复 1001)*2</code> - 4(偏移 4 位)</p><h5 id="指数偏移值"><a href="#指数偏移值" class="headerlink" title="指数偏移值"></a>指数偏移值</h5><p>双精度浮点数固定偏移值 (2^(11-1)-1) 加上指数实际值(即 2^-4 中的 -4) 的 11 位二进制表示。</p><h6 id="注：-exponent-bias-在-64-位中占-11-位"><a href="#注：-exponent-bias-在-64-位中占-11-位" class="headerlink" title="注： exponent bias 在 64 位中占 11 位"></a>注： exponent bias 在 64 位中占 11 位</h6><h5 id="尾数"><a href="#尾数" class="headerlink" title="尾数"></a>尾数</h5><p>fraction 占 52 位所以抽取 52 位小数（多出来的采用四舍五入制）</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001...(中间有 11 个 1001)...1010 (请注意最后四位，是 1010 而不是 1001，因为四舍五入有进位）</span><br></pre></td></tr></table></figure><h3 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h3><p>可以通过四舍五入的方式进行取整，保证数据的准确性</p><h4 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed"></a><code>toFixed</code></h4><p>具备自动四舍五入的能力</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> price = <span class="title class_">Number</span>((<span class="title class_">Number</span>(inputPrice) * <span class="number">100</span>).<span class="title function_">toFixed</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/227951185">0.1 + 0.2 为什么不等于 0.3–奇怪的相等与不等</a></li><li><a href="https://segmentfault.com/a/1190000016884479">为什么 JavaScript 里面 0.1+0.2 &#x3D;&#x3D;&#x3D; 0.3 是 false</a></li><li><a href="https://baike.baidu.com/item/IEEE%20754/3869922?fr=aladdin">IEEE 754</a></li><li><a href="https://zhidao.baidu.com/question/1831743003782686540.html">十进制变二进制小数乘二取整是什么意思</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在商品的价格计算中，由于精度的需要，要把用户输入的价格从元转化为分，其转化规则如下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>antd中form表单联动</title>
    <link href="http://example.com/2022/01/02/antd%E4%B8%ADform%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8/"/>
    <id>http://example.com/2022/01/02/antd%E4%B8%ADform%E8%A1%A8%E5%8D%95%E8%81%94%E5%8A%A8/</id>
    <published>2022-01-02T15:19:35.000Z</published>
    <updated>2022-01-02T08:16:00.334Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发过程中，经常涉及到 <code>form</code> 表单的联动，在 <code>A</code> 选项中的某个值选中时出现 <code>BCE</code> 选项，其它值选中时不显示</p><p><img src="/images/form/form-a.png" alt="选中 A 时无选项"></p><p>切换选项后新增选项</p><p><img src="/images/form/form-a-more.jpg" alt="切换选项后新增选项"></p><h3 id="监听选项的-onChange-事件实现"><a href="#监听选项的-onChange-事件实现" class="headerlink" title="监听选项的 onChange 事件实现"></a>监听选项的 <code>onChange</code> 事件实现</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">CustomForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">name</span>=<span class="string">&quot;testa&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Radio.Group</span> <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> setA(e.target.value)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;a === &#x27;B&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">name</span>=<span class="string">&quot;testb&quot;</span>&gt;</span>表单项<span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听表单项的 <code>onChange</code> 事件来修改 <code>state</code> ，<code>state</code> 值来驱动表单项的显示，官方已不建议在 form 表单中使用 <code>onChange</code> 事件</p><h3 id="监听表单的-onValuesChange-事件实现"><a href="#监听表单的-onValuesChange-事件实现" class="headerlink" title="监听表单的 onValuesChange 事件实现"></a>监听表单的 <code>onValuesChange</code> 事件实现</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">CustomForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [a, setA] = <span class="title function_">useState</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onValuesChange</span>=<span class="string">&#123;(_,</span> <span class="attr">values</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        const &#123; testa &#125; = values</span></span><br><span class="line"><span class="language-xml">        setA(testa)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    &gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">name</span>=<span class="string">&quot;testa&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;a === &#x27;B&#x27; &amp;&amp; <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">name</span>=<span class="string">&quot;testb&quot;</span>&gt;</span>表单项<span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过监听表单的 <code>onValuesChange</code> 事件来修改 <code>state</code> ，<code>state</code> 值来驱动表单项的显示</p><h3 id="自定义组件-children-的渲染实现"><a href="#自定义组件-children-的渲染实现" class="headerlink" title="自定义组件 children 的渲染实现"></a>自定义组件 <code>children</code> 的渲染实现</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Advertise</span>(<span class="params"><span class="attr">props</span>: <span class="title class_">RadioGroupProps</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value, children, defaultValue, ...otherProps &#125; = props</span><br><span class="line">  <span class="keyword">const</span> isShowChildren =</span><br><span class="line">    (<span class="title function_">isUndefined</span>(value) &amp;&amp; defaultValue === <span class="number">1</span>) || value === <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Radio.Group</span> &#123;<span class="attr">...otherProps</span>&#125; <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">defaultValue</span>=<span class="string">&#123;defaultValue&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;AdActList.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">key</span>=<span class="string">&#123;item.value&#125;</span> <span class="attr">value</span>=<span class="string">&#123;item.value&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;item.label&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Radio.Group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isShowChildren &amp;&amp; children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过自定义的表单驱动其它元素的渲染，把逻辑收束到组件内</p><h5 id="提示：参考-antd-官方文档实现子定义表单控件"><a href="#提示：参考-antd-官方文档实现子定义表单控件" class="headerlink" title="提示：参考 antd 官方文档实现子定义表单控件"></a>提示：参考 <code>antd</code> 官方文档实现子定义表单控件</h5><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://ant.design/components/form-cn/">antd form 表单</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;日常开发过程中，经常涉及到 &lt;code&gt;form&lt;/code&gt; 表单的联动，在 &lt;code&gt;A&lt;/code&gt; 选项中的某个值选中时出现 &lt;code&gt;BCE&lt;/code&gt; 选项，其它值选中时不显示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/form/form-a.pn</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="antd" scheme="http://example.com/tags/antd/"/>
    
    <category term="form" scheme="http://example.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>chorme插件开发（一）</title>
    <link href="http://example.com/2021/12/12/chorme%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/12/12/chorme%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-12-12T15:10:30.000Z</published>
    <updated>2021-12-12T09:39:51.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>谷歌浏览器插件是一种小型的用于定制浏览器体验的程序。每个插件必须在根目录包含 <code>manifest.json</code> 来描述插件，其文件结构如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 插件根目录</span><br><span class="line">|--- manifest.json // 插件描述文件</span><br><span class="line">|--- 其它文件（图标、js 、css 等）</span><br></pre></td></tr></table></figure><h4 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a><code>manifest.json</code></h4><p>用来描述插件信息，声明插件需要的权限及相关功能的路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 必须</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> <span class="comment">// 插件版本，建议使用最新版本 v3</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;My Extension&quot;</span><span class="punctuation">,</span> <span class="comment">// 插件名称</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;versionString&quot;</span><span class="punctuation">,</span> <span class="comment">// 插件版本</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Recommended</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;default_locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认语言</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A plain text description&quot;</span><span class="punctuation">,</span> <span class="comment">// 插件描述</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 插件图标</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Optional</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> ...<span class="punctuation">,</span> <span class="comment">// 作者</span></span><br><span class="line">  <span class="attr">&quot;automation&quot;</span><span class="punctuation">:</span> ...<span class="punctuation">,</span> <span class="comment">//</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Required</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;background.js&quot;</span><span class="punctuation">,</span> <span class="comment">// background js</span></span><br><span class="line">    <span class="comment">// Optional</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">//   &quot;chrome_settings_overrides&quot;: &#123;...&#125;, // 已不再支持</span></span><br><span class="line"><span class="comment">//   &quot;chrome_url_overrides&quot;: &#123;...&#125;, //  已不再支持</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 插件自定义右键菜单</span></span><br><span class="line">  <span class="attr">&quot;content_capabilities&quot;</span><span class="punctuation">:</span> ...<span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// web 页面上下文中执行的 js ，可通过其实现页面与插件其它 js 的通信</span></span><br><span class="line">  <span class="attr">&quot;content_security_policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>...<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 安全策略</span></span><br><span class="line"><span class="comment">//   &quot;converted_from_user_script&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;cross_origin_embedder_policy&quot;: &#123;&quot;value&quot;: &quot;require-corp&quot;&#125;,</span></span><br><span class="line"><span class="comment">//   &quot;cross_origin_opener_policy&quot;: &#123;&quot;value&quot;: &quot;same-origin&quot;&#125;,</span></span><br><span class="line"><span class="comment">//   &quot;current_locale&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;declarative_net_request&quot;: ...,</span></span><br><span class="line">  <span class="attr">&quot;devtools_page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;devtools.html&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定义的开发者工具页面</span></span><br><span class="line"><span class="comment">//   &quot;differential_fingerprint&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;event_rules&quot;: [&#123;...&#125;],</span></span><br><span class="line"><span class="comment">//   &quot;externally_connectable&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;matches&quot;: [&quot;*://*.example.com/*&quot;]</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &quot;file_browser_handlers&quot;: [...],</span></span><br><span class="line"><span class="comment">//   &quot;file_system_provider_capabilities&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;configurable&quot;: true,</span></span><br><span class="line"><span class="comment">//     &quot;multiple_mounts&quot;: true,</span></span><br><span class="line"><span class="comment">//     &quot;source&quot;: &quot;network&quot;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="attr">&quot;homepage_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://path/to/homepage&quot;</span><span class="punctuation">,</span> <span class="comment">// 插件首页</span></span><br><span class="line"><span class="comment">//   &quot;host_permissions&quot;: [...],</span></span><br><span class="line"><span class="comment">//   &quot;import&quot;: [&#123;&quot;id&quot;: &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;&#125;],</span></span><br><span class="line"><span class="comment">//   &quot;incognito&quot;: &quot;spanning, split, or not_allowed&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;input_components&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;key&quot;: &quot;publicKey&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;minimum_chrome_version&quot;: &quot;versionString&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;nacl_modules&quot;: [...],</span></span><br><span class="line"><span class="comment">//   &quot;natively_connectable&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;oauth2&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;offline_enabled&quot;: true,</span></span><br><span class="line"><span class="comment">//   &quot;omnibox&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;keyword&quot;: &quot;aString&quot;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line">  <span class="attr">&quot;optional_permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tabs&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 可选的权限</span></span><br><span class="line">  <span class="attr">&quot;options_page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;options.html&quot;</span><span class="punctuation">,</span> <span class="comment">// option 页面</span></span><br><span class="line">  <span class="attr">&quot;options_ui&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;chrome_style&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;options.html&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;tabs&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 插件需要的权限，需要在这里声明之后才能使用相关权限</span></span><br><span class="line"><span class="comment">//   &quot;platforms&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;replacement_web_app&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;requirements&quot;: &#123;...&#125;,</span></span><br><span class="line"><span class="comment">//   &quot;sandbox&quot;: [...],</span></span><br><span class="line"><span class="comment">//   &quot;short_name&quot;: &quot;Short Name&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;storage&quot;: &#123;</span></span><br><span class="line"><span class="comment">//     &quot;managed_schema&quot;: &quot;schema.json&quot;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &quot;system_indicator&quot;: ...,</span></span><br><span class="line"><span class="comment">//   &quot;tts_engine&quot;: &#123;...&#125;,</span></span><br><span class="line"><span class="comment">//   &quot;update_url&quot;: &quot;https://path/to/updateInfo.xml&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;version_name&quot;: &quot;aString&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;web_accessible_resources&quot;: [...]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="content-scripts"><a href="#content-scripts" class="headerlink" title="content_scripts"></a><code>content_scripts</code></h5><p><code>Chrome</code> 插件中向页面注入脚本的一种形式（虽然名为 <code>script</code>，其实还可以包括 <code>css</code> 的），借助 <code>content-scripts</code> 我们可以实现通过配置的方式轻松向指定页面注入 <code>JS</code> 和 <code>CSS</code></p><h5 id="background"><a href="#background" class="headerlink" title="background"></a><code>background</code></h5><p>一个常驻的页面，它的生命周期是插件中所有类型页面中最长的，它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在 <code>background</code> 里面。</p><h5 id="popup"><a href="#popup" class="headerlink" title="popup"></a><code>popup</code></h5><p>点击 <code>browser_action</code> 或者 <code>page_action</code> 图标时打开的一个小窗口网页，焦点离开网页就立即关闭，一般用来做一些临时性的交互。</p><h5 id="homepage-url"><a href="#homepage-url" class="headerlink" title="homepage_url"></a><code>homepage_url</code></h5><p>开发者或者插件主页设置</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ol><li>创建好插件文件夹，添加 <code>manifest.json</code>，输入如下内容</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;插件测试&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在浏览器中访问 <code>chrome://extensions</code>，打开开发者模式。<br><img src="/images/chrome/plugins-develop-mode.png" alt="charles 代理转发"></li><li>加载解压的插件<br><img src="/images/chrome/plugins-develop-load.png" alt="charles 代理转发"></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html">【干货】Chrome 插件(扩展)开发全攻略</a></li><li><a href="https://developer.chrome.com/docs/extensions/mv3/manifest/">manifest 文件概览</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h3&gt;&lt;p&gt;谷歌浏览器插件是一种小型的用于定制浏览器体验的程序。每个插件必须在根目录包含 &lt;code&gt;manifest.json&lt;/code&gt; 来描述插</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="插件" scheme="http://example.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>代理</title>
    <link href="http://example.com/2021/10/24/%E4%BB%A3%E7%90%86/"/>
    <id>http://example.com/2021/10/24/%E4%BB%A3%E7%90%86/</id>
    <published>2021-10-23T21:30:23.000Z</published>
    <updated>2021-10-23T14:50:41.234Z</updated>
    
    <content type="html"><![CDATA[<p>前端开发时，需要 <code>mock</code> 或请求对应的数据，选择一种合适的方式获取数据可以大大提高开发效率</p><h2 id="获取数据方式"><a href="#获取数据方式" class="headerlink" title="获取数据方式"></a>获取数据方式</h2><h3 id="本地-mock"><a href="#本地-mock" class="headerlink" title="本地 mock"></a>本地 mock</h3><ul><li>页面接口请求到达 <code>dev server</code> 之后会转发到 <code>mock</code> 服务上，然后返回 <code>mock</code> 数据</li><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li></ul><p><img src="/images/api/dev_server_mock.svg" alt="本地 mock 数据请求流程"></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><code>mock</code> 数据只需要配置一次，无需后续的额外操作</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>无法服用线上接口数据</li><li>项目中可能会出现许多 <code>mock</code> 数据相关的代码</li><li>接口之间无关联性</li></ul><h3 id="直接请求线上数据"><a href="#直接请求线上数据" class="headerlink" title="直接请求线上数据"></a>直接请求线上数据</h3><ul><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li><li>通过绝对地址或者浏览器代理的方式转发请求到线上服务</li></ul><p><img src="/images/api/online_server.svg" alt="直接请求线上数据"></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>通过硬编码绝对路径的方式对代码入侵较大，可以通过浏览器代理插件的方式实现对接口的转发</li><li>当接口需要登陆时，可在浏览器插件中实现注入对应环境 <code>cookie</code> 的功能</li></ul><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的插件</li><li>需要在项目之外做额外的配置</li></ul><h3 id="devServer-代理转发"><a href="#devServer-代理转发" class="headerlink" title="devServer 代理转发"></a>devServer 代理转发</h3><ul><li>页面静态资源请求会到达 <code>dev server</code> ，然后直接返回静态资源</li><li>通过 <code>dve server</code> 把接口代理转发到对应服务上</li></ul><p><img src="/images/api/dev_server_proxy.svg" alt="devServer 代理转发请求线上数据"></p><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>当接口需要登陆时，可在浏览器插件中实现把对应环境 <code>cookie</code> 注入到开发服务页面下的功能</li></ul><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的插件</li><li>需要在项目之外做额外的配置</li></ul><h3 id="charles-代理转发"><a href="#charles-代理转发" class="headerlink" title="charles 代理转发"></a>charles 代理转发</h3><ul><li>页面静态资源会按照规则转发到 <code>dev server</code>上，然后直接返回静态资源</li><li>接口请求会按照规则转发到远端服务</li></ul><p><img src="/images/api/charles_proxy.svg" alt="charles 代理转发"></p><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>当接口需要登陆时，本地服务转发需要先注入对应环境的 <code>cookie</code> 才可以请求</li></ul><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>可以复用线上接口数据</li><li>接口之间存在联动和业务逻辑</li><li>便于切换环境和账号</li></ul><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul><li>需要安装额外的软件</li><li>需要学习 charles 相关的配置</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端开发时，需要 &lt;code&gt;mock&lt;/code&gt; 或请求对应的数据，选择一种合适的方式获取数据可以大大提高开发效率&lt;/p&gt;
&lt;h2 id=&quot;获取数据方式&quot;&gt;&lt;a href=&quot;#获取数据方式&quot; class=&quot;headerlink&quot; title=&quot;获取数据方式&quot;&gt;&lt;/a&gt;获</summary>
      
    
    
    
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络-DNS</title>
    <link href="http://example.com/2021/08/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-DNS/"/>
    <id>http://example.com/2021/08/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-DNS/</id>
    <published>2021-08-15T23:05:40.000Z</published>
    <updated>2021-10-23T12:30:00.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常通过 <code>baidu.com</code> 访问百度的服务，这个 <code>baidu.com</code> 就是百度持有的域名（Domain Name），然而在网络中能够识别的只有 <code>IP</code> ，那就需要把域名转化为对应的 <code>IP</code> 地址。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>DNS</code> 全名叫做 <code>Domain Name System</code>, 中文叫做 <code>域名服务系统</code>，主要作用是把域名转化为网络中对应的 <code>IP</code> 地址。</p><h2 id="工作原理（以浏览器为例）"><a href="#工作原理（以浏览器为例）" class="headerlink" title="工作原理（以浏览器为例）"></a>工作原理（以浏览器为例）</h2><p><img src="/images/network/dns.svg" alt="浏览器解析域名流程"></p><ol><li>浏览器解析出地址栏中的域名</li><li>在浏览器缓存中查找是否有缓存此域名的地址</li><li>在系统中是否有缓存此域名的地址</li><li>通过 <code>UDP</code> 的方式向系统中配置的 <code>DNS</code> 服务器查找域名对应的 <code>IP</code> 地址</li><li><code>DNS</code> 服务器通过 <code>UDP</code> 向根域名服务器查找域名地址，根域名服务器返回下一个查找的顶级域名服务器的 <code>IP</code> 地址</li><li><code>DNS</code> 服务器通过 <code>UDP</code> 向顶级域名服务器查找域名地址，顶级域名服务器返回下一个查找域名服务器的 <code>IP</code> 地址，不断查找，直到找到域名对应的 <code>IP</code> 地址为止</li><li><code>DNS</code> 服务器返回域名服务器的地址</li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>域名分别在浏览器、操作系统、域名服务器三个层级做了缓存以提高访问速度</li><li>获取域名时浏览器调用了操作系统的能力委托操作系统到操作系统配置的域名服务器上进行域名查找</li><li>浏览器通过递归的方式分别去浏览器、操作系统和域名服务器上查找，而域名服务器是通过迭代的方式去各级域名服务器上进行查找的</li></ul><h3 id="各层级域名节点"><a href="#各层级域名节点" class="headerlink" title="各层级域名节点"></a>各层级域名节点</h3><ul><li>域名服务器具有层级关系</li><li>每个层级的域名服务器都存储了根域名服务器的地址信息，这样方便快速查找域名服务的信息</li><li>每个层级的域名服务器都需要注册到其对应的上一级域名服务器中</li></ul><p><img src="/images/network/dns-node.svg" alt="域名服务器节点关系图"></p><h2 id="域名服务数据更新"><a href="#域名服务数据更新" class="headerlink" title="域名服务数据更新"></a>域名服务数据更新</h2><p>当域名服务系统数据有变化时就需要去更新对应的数据</p><ul><li>当根域名服务器地址有变化时，各级域名服务需要通过 <code>TCP</code> 的方式更新对应的数据</li><li>当有新的子域名服务器注册或者域名信息注销时需要子域名通过 <code>TCP</code> 的方式把更新信息同步到当前域名服务</li></ul><p><img src="/images/network/dns-update.svg" alt="域名服务器更新数据图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;通常通过 &lt;code&gt;baidu.com&lt;/code&gt; 访问百度的服务，这个 &lt;code&gt;baidu.com&lt;/code&gt; 就是百度持有的域</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染</title>
    <link href="http://example.com/2021/08/08/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>http://example.com/2021/08/08/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93/</id>
    <published>2021-08-08T13:14:02.000Z</published>
    <updated>2021-08-08T07:50:34.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同构应用"><a href="#同构应用" class="headerlink" title="同构应用"></a>同构应用</h2><h3 id="环境区分"><a href="#环境区分" class="headerlink" title="环境区分"></a>环境区分</h3><p>服务端和客户端所处环境有些许区别，打包时要根据不同环境打包出对应的资源</p><h4 id="路由代码"><a href="#路由代码" class="headerlink" title="路由代码"></a>路由代码</h4><ul><li>服务端从请求对象中获取路径，需要先从请求对象中提取出路径之后再通过上下文传递进应用之中</li><li>客户端从全局路由对象中获取路径进行匹配</li></ul><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><ul><li>服务端的依赖可以直接从依赖中获取，而客户端则需要把所有依赖打包到对应的 <code>chunk</code> 中</li><li>服务端不关心样式问题，而客户端需要加载对应的样式</li><li>分环境进行打包时，会导致部分资源重复打包和覆盖</li></ul><h3 id="注水和脱水"><a href="#注水和脱水" class="headerlink" title="注水和脱水"></a>注水和脱水</h3><p>服务端渲染时可能会通过接口请求数据，并保存准备好的数据状态，避免客户端做重复的请求</p><ul><li>脱水：服务端返回 <code>HTML</code> 时需要把数据状态通过字符串的形式保存在 <code>HTML</code> 字符串中。</li><li>注水：客户端通过 <code>HTML</code> 中格式化后的数据初始化状态。</li></ul><h4 id="服务端请求"><a href="#服务端请求" class="headerlink" title="服务端请求"></a>服务端请求</h4><ul><li>通过配置文件的方式统一声明服务端需要请求的数据</li><li>通过组件静态方法统一处理请求（需要框架遍历每个组件的属性去请求数据）</li></ul><h3 id="请求认证"><a href="#请求认证" class="headerlink" title="请求认证"></a>请求认证</h3><p>服务端请求时不会自动携带客户端传递来的信息（例如 <code>cookie</code>） ，需要手动把请求中的字段提取出来放入服务端的请求中</p><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>服务端渲染时不需要样式，但是客户端渲染时需要处理样式问题，若通过外部引入会造成在客户端样式的抖动</p><h3 id="meta-tags-处理"><a href="#meta-tags-处理" class="headerlink" title="meta tags 处理"></a>meta tags 处理</h3><p>客户端和服务端渲染时有时需要动态修改 <code>head</code> 里的信息（SEO）</p><h3 id="404-处理"><a href="#404-处理" class="headerlink" title="404 处理"></a>404 处理</h3><p>当服务端匹配不到页面时，应该返回一个 <code>404</code> 的状态码和对应的内容</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>上述注水和脱水过程中容易存在 <code>script</code> 脚本注入的风险，在序列化之前需要对对象做转义</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li>缓存</li><li>单服务改为服务集群</li><li>服务压力过大时改成客户端渲染</li><li>升级 <code>Nodejs</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;同构应用&quot;&gt;&lt;a href=&quot;#同构应用&quot; class=&quot;headerlink&quot; title=&quot;同构应用&quot;&gt;&lt;/a&gt;同构应用&lt;/h2&gt;&lt;h3 id=&quot;环境区分&quot;&gt;&lt;a href=&quot;#环境区分&quot; class=&quot;headerlink&quot; title=&quot;环境区分&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="react" scheme="http://example.com/tags/react/"/>
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>简易的express中间件</title>
    <link href="http://example.com/2021/08/07/%E7%AE%80%E6%98%93%E7%9A%84express%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://example.com/2021/08/07/%E7%AE%80%E6%98%93%E7%9A%84express%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2021-08-07T14:51:11.000Z</published>
    <updated>2021-08-07T07:39:05.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>基于 <code>Node.js</code> 平台，快速、开放、极简的 <code>Web</code> 开发框架</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>从请求到相应过程中执行的一系列函数被称为中间件，使其具有了极高的扩展性</p><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">middware1</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/test&#x27;</span>, <span class="keyword">function</span> <span class="title function_">middware2</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>当请求 <code>/test</code> 时，会按照 <code>middware1</code> -&gt; <code>middware2</code> 的顺序依次执行注册的中间件</p><h4 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isMathch</span>(<span class="params">source, match</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> source.<span class="title function_">startsWith</span>(match)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = &#123;</span><br><span class="line">  <span class="attr">middwares</span>: [],</span><br><span class="line">  <span class="attr">use</span>: <span class="keyword">function</span> (<span class="params">path, fun</span>) &#123;</span><br><span class="line">    <span class="comment">// 把注册的中间件放入 middwares 数组中</span></span><br><span class="line">    <span class="keyword">let</span> handler = fun</span><br><span class="line">    <span class="keyword">let</span> matchPath = path</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fun === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      matchPath = <span class="string">&#x27;/&#x27;</span></span><br><span class="line">      handler = path</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middwares</span>.<span class="title function_">push</span>(&#123; handler, <span class="attr">path</span>: matchPath &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">call</span>: <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 从 middwares 中提取匹配的中间件执行</span></span><br><span class="line">    <span class="keyword">const</span> &#123; pathname = <span class="string">&#x27;/&#x27;</span> &#125; = req</span><br><span class="line">    <span class="keyword">const</span> middwares = <span class="variable language_">this</span>.<span class="property">middwares</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">isMathch</span>(pathname, item.<span class="property">path</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> len = middwares.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 index 控制执行的中间件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params">err</span>) &#123;</span><br><span class="line">      index++</span><br><span class="line">      <span class="keyword">if</span> (index &lt; len) &#123;</span><br><span class="line">        middwares[index].<span class="title function_">handler</span>(req, res, next)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">next</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>express 调度实现<a href="https://github.com/expressjs/express/blob/master/lib/router/route.js#L98">链接</a></li><li>express use 实现<a href="https://github.com/expressjs/express/blob/master/lib/application.js#L187">链接</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.expressjs.com.cn/guide/writing-middleware.html">expressjs</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h2&gt;&lt;p&gt;基于 &lt;code&gt;Node.js&lt;/code&gt; 平台，快速、开放、极简的 &lt;code&gt;Web&lt;/co</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
  </entry>
  
</feed>
